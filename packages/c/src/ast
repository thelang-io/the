/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

export type CExpressionBody =
  CIdentifier |
  CLiteral |
  CAssignmentExpression |
  CBinaryExpression |
  CCallExpression |
  CCastExpression |
  CCommaExpression |
  CConditionalExpression |
  CElementAccessExpression |
  CInitializerListExpression |
  CMacroInvocation |
  CPropertyAccessExpression |
  CUnaryExpression

export type CStatementBody =
  CBreakStatement |
  CCaseStatement |
  CCompoundStatement |
  CConditionalDirective |
  CContinueStatement |
  CDefineDirective |
  CEmptyStatement |
  CExpressionStatement |
  CFunctionDeclaration |
  CForStatement |
  CGotoStatement |
  CIfStatement |
  CIncludeDirective |
  CLabelStatement |
  CReturnStatement |
  CStructureDeclaration |
  CStructureMemberDeclaration |
  CTypedefDeclaration |
  CSwitchStatement |
  CVariableDeclaration |
  CWhileStatement

export obj CType {
  mut constant: bool
  mut reference: bool
  mut value: str

  fn stringify (self: ref Self, declaration := false, definition := false) str {
    if !declaration && !definition {
      throw error_NewError("You need to specify either declaration or definition")
    }

    mut result := (self.constant ? "const " : "") + self.value

    if self.reference {
      lastChar := result.slice(-1)
      result += lastChar == " " || lastChar == "*" ? "*" : " *"
    }

    if declaration {
      lastChar := result.slice(-1)
      result += lastChar == " " || lastChar == "*" ? "" : " "
    } else {
      result = result.trimEnd()
    }

    return result
  }
}

export obj CExpression {
  mut body: CExpressionBody
  mut parent: (ref CExpression)?
  mut parentStatement: (ref CStatement)?
  mut parenthesized: bool

  fn asIdentifier (mut self: ref Self) ref CIdentifier { return ref(self.body as CIdentifier) }
  fn asLiteral (mut self: ref Self) ref CLiteral { return ref(self.body as CLiteral) }
  fn asAssignmentExpression (mut self: ref Self) ref CAssignmentExpression { return ref(self.body as CAssignmentExpression) }
  fn asBinaryExpression (mut self: ref Self) ref CBinaryExpression { return ref(self.body as CBinaryExpression) }
  fn asCallExpression (mut self: ref Self) ref CCallExpression { return ref(self.body as CCallExpression) }
  fn asCastExpression (mut self: ref Self) ref CCastExpression { return ref(self.body as CCastExpression) }
  fn asCommaExpression (mut self: ref Self) ref CCommaExpression { return ref(self.body as CCommaExpression) }
  fn asConditionalExpression (mut self: ref Self) ref CConditionalExpression { return ref(self.body as CConditionalExpression) }
  fn asElementAccessExpression (mut self: ref Self) ref CElementAccessExpression { return ref(self.body as CElementAccessExpression) }
  fn asInitializerListExpression (mut self: ref Self) ref CInitializerListExpression { return ref(self.body as CInitializerListExpression) }
  fn asMacroInvocation (mut self: ref Self) ref CMacroInvocation { return ref(self.body as CMacroInvocation) }
  fn asPropertyAccessExpression (mut self: ref Self) ref CPropertyAccessExpression { return ref(self.body as CPropertyAccessExpression) }
  fn asUnaryExpression (mut self: ref Self) ref CUnaryExpression { return ref(self.body as CUnaryExpression) }
  fn isIdentifier (self: ref Self) bool { return self.body is CIdentifier }
  fn isLiteral (self: ref Self) bool { return self.body is CLiteral }
  fn isAssignmentExpression (self: ref Self) bool { return self.body is CAssignmentExpression }
  fn isBinaryExpression (self: ref Self) bool { return self.body is CBinaryExpression }
  fn isCallExpression (self: ref Self) bool { return self.body is CCallExpression }
  fn isCastExpression (self: ref Self) bool { return self.body is CCastExpression }
  fn isCommaExpression (self: ref Self) bool { return self.body is CCommaExpression }
  fn isConditionalExpression (self: ref Self) bool { return self.body is CConditionalExpression }
  fn isElementAccessExpression (self: ref Self) bool { return self.body is CElementAccessExpression }
  fn isInitializerListExpression (self: ref Self) bool { return self.body is CInitializerListExpression }
  fn isMacroInvocation (self: ref Self) bool { return self.body is CMacroInvocation }
  fn isPropertyAccessExpression (self: ref Self) bool { return self.body is CPropertyAccessExpression }
  fn isUnaryExpression (self: ref Self) bool { return self.body is CUnaryExpression }

  fn statement (self: ref Self) CStatement {
    return createExpressionStatement(self)
  }

  fn stringify (self: ref Self) str {
    mut result := ""

    if self.isIdentifier() {
      expression := self.asIdentifier()
      result = expression.stringify()
    } elif self.isLiteral() {
      expression := self.asLiteral()
      result = expression.stringify()
    } elif self.isAssignmentExpression() {
      expression := self.asAssignmentExpression()
      result = expression.stringify()
    } elif self.isBinaryExpression() {
      expression := self.asBinaryExpression()
      result = expression.stringify()
    } elif self.isCallExpression() {
      expression := self.asCallExpression()
      result = expression.stringify()
    } elif self.isCastExpression() {
      expression := self.asCastExpression()
      result = expression.stringify()
    } elif self.isCommaExpression() {
      expression := self.asCommaExpression()
      result = expression.stringify()
    } elif self.isConditionalExpression() {
      expression := self.asConditionalExpression()
      result = expression.stringify()
    } elif self.isElementAccessExpression() {
      expression := self.asElementAccessExpression()
      result = expression.stringify()
    } elif self.isInitializerListExpression() {
      expression := self.asInitializerListExpression()
      result = expression.stringify()
    } elif self.isMacroInvocation() {
      expression := self.asMacroInvocation()
      result = expression.stringify()
    } elif self.isPropertyAccessExpression() {
      expression := self.asPropertyAccessExpression()
      result = expression.stringify()
    } elif self.isUnaryExpression() {
      expression := self.asUnaryExpression()
      result = expression.stringify()
    } else {
      throw error_NewError("Unable to stringify specified expression")
    }

    return self.parenthesized ? "(" + result + ")" : result
  }

  fn wrap (mut self: CExpression) CExpression {
    return createExpression(self.body, parenthesized: true)
  }
}

export obj CStatement {
  mut body: CStatementBody
  mut terminated: bool
  mut parent: (ref CStatement)?
  mut nextSibling: (ref CStatement)?
  mut prevSibling: (ref CStatement)?

  fn asBreakStatement (mut self: ref Self) ref CBreakStatement { return ref (self.body as CBreakStatement) }
  fn asCaseStatement (mut self: ref Self) ref CCaseStatement { return ref (self.body as CCaseStatement) }
  fn asCompoundStatement (mut self: ref Self) ref CCompoundStatement { return ref (self.body as CCompoundStatement) }
  fn asConditionalDirective (mut self: ref Self) ref CConditionalDirective { return ref (self.body as CConditionalDirective) }
  fn asContinueStatement (mut self: ref Self) ref CContinueStatement { return ref (self.body as CContinueStatement) }
  fn asDefineDirective (mut self: ref Self) ref CDefineDirective { return ref (self.body as CDefineDirective) }
  fn asEmptyStatement (mut self: ref Self) ref CEmptyStatement { return ref (self.body as CEmptyStatement) }
  fn asExpressionStatement (mut self: ref Self) ref CExpressionStatement { return ref (self.body as CExpressionStatement) }
  fn asFunctionDeclaration (mut self: ref Self) ref CFunctionDeclaration { return ref (self.body as CFunctionDeclaration) }
  fn asForStatement (mut self: ref Self) ref CForStatement { return ref (self.body as CForStatement) }
  fn asGotoStatement (mut self: ref Self) ref CGotoStatement { return ref (self.body as CGotoStatement) }
  fn asIfStatement (mut self: ref Self) ref CIfStatement { return ref (self.body as CIfStatement) }
  fn asIncludeDirective (mut self: ref Self) ref CIncludeDirective { return ref (self.body as CIncludeDirective) }
  fn asLabelStatement (mut self: ref Self) ref CLabelStatement { return ref (self.body as CLabelStatement) }
  fn asReturnStatement (mut self: ref Self) ref CReturnStatement { return ref (self.body as CReturnStatement) }
  fn asStructureDeclaration (mut self: ref Self) ref CStructureDeclaration { return ref (self.body as CStructureDeclaration) }
  fn asStructureMemberDeclaration (mut self: ref Self) ref CStructureMemberDeclaration { return ref (self.body as CStructureMemberDeclaration) }
  fn asSwitchStatement (mut self: ref Self) ref CSwitchStatement { return ref (self.body as CSwitchStatement) }
  fn asTypedefDeclaration (mut self: ref Self) ref CTypedefDeclaration { return ref (self.body as CTypedefDeclaration) }
  fn asVariableDeclaration (mut self: ref Self) ref CVariableDeclaration { return ref (self.body as CVariableDeclaration) }
  fn asWhileStatement (mut self: ref Self) ref CWhileStatement { return ref (self.body as CWhileStatement) }
  fn isBreakStatement (self: ref Self) bool { return self.body is CBreakStatement }
  fn isCaseStatement (self: ref Self) bool { return self.body is CCaseStatement }
  fn isCompoundStatement (self: ref Self) bool { return self.body is CCompoundStatement }
  fn isConditionalDirective (self: ref Self) bool { return self.body is CConditionalDirective }
  fn isContinueStatement (self: ref Self) bool { return self.body is CContinueStatement }
  fn isDefineDirective (self: ref Self) bool { return self.body is CDefineDirective }
  fn isEmptyStatement (self: ref Self) bool { return self.body is CEmptyStatement }
  fn isExpressionStatement (self: ref Self) bool { return self.body is CExpressionStatement }
  fn isFunctionDeclaration (self: ref Self) bool { return self.body is CFunctionDeclaration }
  fn isForStatement (self: ref Self) bool { return self.body is CForStatement }
  fn isGotoStatement (self: ref Self) bool { return self.body is CGotoStatement }
  fn isIfStatement (self: ref Self) bool { return self.body is CIfStatement }
  fn isIncludeDirective (self: ref Self) bool { return self.body is CIncludeDirective }
  fn isLabelStatement (self: ref Self) bool { return self.body is CLabelStatement }
  fn isReturnStatement (self: ref Self) bool { return self.body is CReturnStatement }
  fn isTypedefDeclaration (self: ref Self) bool { return self.body is CTypedefDeclaration }
  fn isStructureDeclaration (self: ref Self) bool { return self.body is CStructureDeclaration }
  fn isStructureMemberDeclaration (self: ref Self) bool { return self.body is CStructureMemberDeclaration }
  fn isSwitchStatement (self: ref Self) bool { return self.body is CSwitchStatement }
  fn isVariableDeclaration (self: ref Self) bool { return self.body is CVariableDeclaration }
  fn isWhileStatement (self: ref Self) bool { return self.body is CWhileStatement }

  fn definition (self: ref Self) str {
    if self.isFunctionDeclaration() {
      statement := self.asFunctionDeclaration()
      return statement.definition()
    } elif self.isStructureDeclaration() {
      statement := self.asStructureDeclaration()
      return statement.definition()
    } else {
      throw error_NewError("Unable to generate definition for specified statement")
    }
  }

  fn stringify (self: ref Self, indent := 0, root := true) str {
    mut result := ""

    if self.isBreakStatement() {
      statement := self.asBreakStatement()
      result = statement.stringify()
    } elif self.isCaseStatement() {
      statement := self.asCaseStatement()
      result = statement.stringify(indent)
    } elif self.isCompoundStatement() {
      statement := self.asCompoundStatement()
      result = statement.stringify(indent)
    } elif self.isConditionalDirective() {
      statement := self.asConditionalDirective()
      result = statement.stringify(indent, root)
    } elif self.isContinueStatement() {
      statement := self.asContinueStatement()
      result = statement.stringify()
    } elif self.isDefineDirective() {
      statement := self.asDefineDirective()
      result = statement.stringify()
    } elif self.isEmptyStatement() {
      statement := self.asEmptyStatement()
      result = statement.stringify()
    } elif self.isExpressionStatement() {
      statement := self.asExpressionStatement()
      result = statement.stringify(terminated: self.terminated)
    } elif self.isFunctionDeclaration() {
      statement := self.asFunctionDeclaration()
      result = statement.stringify()
    } elif self.isForStatement() {
      statement := self.asForStatement()
      result = statement.stringify(indent)
    } elif self.isGotoStatement() {
      statement := self.asGotoStatement()
      result = statement.stringify()
    } elif self.isIfStatement() {
      statement := self.asIfStatement()
      result = statement.stringify(indent)
    } elif self.isIncludeDirective() {
      statement := self.asIncludeDirective()
      result = statement.stringify()
    } elif self.isLabelStatement() {
      statement := self.asLabelStatement()
      result = statement.stringify()
    } elif self.isReturnStatement() {
      statement := self.asReturnStatement()
      result = statement.stringify()
    } elif self.isStructureDeclaration() {
      statement := self.asStructureDeclaration()
      result = statement.stringify(terminated: self.terminated)
    } elif self.isStructureMemberDeclaration() {
      statement := self.asStructureMemberDeclaration()
      result = statement.stringify()
    } elif self.isSwitchStatement() {
      statement := self.asSwitchStatement()
      result = statement.stringify(indent)
    } elif self.isTypedefDeclaration() {
      statement := self.asTypedefDeclaration()
      result = statement.stringify()
    } elif self.isVariableDeclaration() {
      statement := self.asVariableDeclaration()
      result = statement.stringify(terminated: self.terminated)
    } elif self.isWhileStatement() {
      statement := self.asWhileStatement()
      result = statement.stringify(indent)
    } else {
      throw error_NewError("Unable to stringify specified statement")
    }

    if !root || self.isEmptyStatement() || self.isLabelStatement() {
      return result
    }

    return ' '.repeat(indent) + result + os_EOL
  }
}

export obj CFunctionParameter {
  mut t: CType
  mut name: str

  fn stringify (self: ref Self) str {
    return self.name.empty ? self.t.stringify(definition: true) : self.t.stringify(declaration: true) + self.name
  }
}

export obj CIdentifier {
  mut name: str

  fn stringify (self: ref Self) str {
    return self.name
  }
}

export obj CLiteral {
  mut intValue: int
  mut stringValue: str

  fn stringify (self: ref Self) str {
    return self.stringValue.empty && self.intValue != 0
      ? self.intValue.str()
      : self.stringValue
  }
}

export obj CAssignmentExpression {
  mut left: CExpression
  mut operator: str
  mut right: CExpression

  fn stringify (self: ref Self) str {
    return self.left.stringify() + " " + self.operator + " " + self.right.stringify()
  }
}

export obj CBinaryExpression {
  mut left: CExpression
  mut operator: str
  mut right: CExpression

  fn stringify (self: ref Self) str {
    return self.left.stringify() + " " + self.operator + " " + self.right.stringify()
  }
}

export obj CCallExpression {
  mut callee: CExpression
  mut arguments: (CExpression | CType)[]

  fn stringify (self: ref Self) str {
    mut content := ""
    loop i := 0; i < self.arguments.len; i++ {
      argument := self.arguments[i] as CExpression | CType
      content += i == 0 ? "" : ", "

      if argument is CExpression {
        content += argument.stringify()
      } else {
        content += argument.stringify(definition: true)
      }
    }
    return self.callee.stringify() + "(" + content + ")"
  }
}

export obj CCastExpression {
  mut t: CType
  mut argument: CExpression

  fn stringify (self: ref Self) str {
    return "(" + self.t.stringify(definition: true) + ") " + self.argument.stringify()
  }
}

export obj CCommaExpression {
  mut left: CExpression
  mut right: CExpression

  fn stringify (self: ref Self) str {
    return self.left.stringify() + ", " + self.right.stringify()
  }
}

export obj CConditionalExpression {
  mut condition: CExpression
  mut consequent: CExpression
  mut alternate: CExpression

  fn stringify (self: ref Self) str {
    return self.condition.stringify() + " ? " + self.consequent.stringify() + " : " + self.alternate.stringify()
  }
}

export obj CElementAccessExpression {
  mut expression: CExpression
  mut element: CExpression

  fn stringify (self: ref Self) str {
    return self.expression.stringify() + "[" + self.element.stringify() + "]"
  }
}

export obj CInitializerListExpression {
  mut items: CExpression[]

  fn stringify (self: ref Self) str {
    mut content := ""
    loop i := 0; i < self.items.len; i++ {
      content += i == 0 ? "" : ", "
      content += self.items[i].stringify()
    }
    return "{" + content + "}"
  }
}

export obj CMacroInvocation {
  mut callee: str
  mut arguments: (CExpression | CStatement | CType)[]

  fn stringify (self: ref Self) str {
    mut content := ""

    loop i := 0; i < self.arguments.len; i++ {
      argument := self.arguments[i] as CExpression | CStatement | CType
      content += i == 0 ? "" : ", "

      if argument is CExpression {
        content += argument.stringify()
      } elif argument is CStatement {
        content += argument.stringify(root: false)
      } else {
        content += argument.stringify(definition: true)
      }
    }

    return self.callee + "(" + content + ")"
  }
}

export obj CPropertyAccessExpression {
  mut expression: CExpression
  mut property: str
  mut pointed: bool

  fn stringify (self: ref Self) str {
    operator := self.pointed ? "->" : "."
    return self.expression.stringify() + operator + self.property
  }
}

export obj CUnaryExpression {
  mut argument: CExpression
  mut operator: str
  mut postfix: bool

  fn stringify (self: ref Self) str {
    if self.postfix {
      return self.argument.stringify() + self.operator
    } else {
      return self.operator + self.argument.stringify()
    }
  }
}

export obj CBreakStatement {
  fn stringify (self: ref Self) str {
    return "break;"
  }
}

export obj CCaseStatement {
  mut test: CExpression?
  mut body: CStatement

  fn stringify (self: ref Self, indent: int) str {
    return (self.test != nil ? "case " + self.test.stringify() : "default") +
        ": " + self.body.stringify(indent, root: false)
  }
}

export obj CCompoundStatement {
  mut body: CStatement[]

  fn stringify (self: ref Self, indent: int) str {
    mut content := ""
    l := self.body.len
    if l == 0 {
      return "{}"
    }
    loop i := 0; i < l; i++ {
      content += self.body[i].stringify(indent + 2)
    }
    return "{" + os_EOL + content + ' '.repeat(indent) + "}"
  }
}

export obj CConditionalDirective {
  mut condition: str
  mut consequent: CStatement[]
  mut alternate: CStatement?

  fn stringify (self: ref Self, indent: int, root: bool) str {
    mut result := (root ? "#if " : "") + self.condition + os_EOL

    loop i := 0; i < self.consequent.len; i++ {
      result += self.consequent[i].stringify(indent + 2)
    }

    if self.alternate != nil {
      alternate := self.alternate

      if alternate.isCompoundStatement() {
        compoundStatement := alternate.asCompoundStatement()
        result += ' '.repeat(indent) + "#else" + os_EOL

        loop i := 0; i < compoundStatement.body.len; i++ {
          result += compoundStatement.body[i].stringify(indent + 2)
        }
      } else {
        result += ' '.repeat(indent) + "#elif " + self.alternate.stringify(indent, root: false)
      }
    }

    return result + (root ? ' '.repeat(indent) + "#endif" : "")
  }
}

export obj CContinueStatement {
  fn stringify (self: ref Self) str {
    return "continue;"
  }
}

export obj CDefineDirective {
  mut name: str
  mut isFunction: bool
  mut params: str[]
  mut value: str

  fn stringify (self: ref Self) str {
    return "#define " + self.name + (self.isFunction ? "(" + self.params.join(", ") + ")" : "") +
      (self.value.empty ? "" : " " + self.value)
  }
}

export obj CEmptyStatement {
  fn stringify () str {
    return ""
  }
}

export obj CExpressionStatement {
  mut expression: CExpression

  fn stringify (self: ref Self, terminated: bool) str {
    return self.expression.stringify() + (terminated ? ";" : "")
  }
}

export obj CForStatement {
  mut initializer: CStatement?
  mut condition: CExpression?
  mut update: CExpression?
  mut body: CStatement

  fn stringify (self: ref Self, indent: int) str {
    initializerPart := (self.initializer == nil ? ";" : self.initializer.stringify(root: false))
    conditionPart := (self.condition == nil ? "" : " " + self.condition.stringify()) + ";"
    updatePart := self.update == nil ? "" : " " + self.update.stringify()

    return "for (" + initializerPart + conditionPart + updatePart + ") " +
      self.body.stringify(indent, root: false)
  }
}

export obj CFunctionDeclaration {
  mut returnType: CType
  mut name: str
  mut parameters: CFunctionParameter[]
  mut body: CStatement

  fn definition (self: ref Self) str {
    mut parameters := ""
    loop i := 0; i < self.parameters.len; i++ {
      parameters += i == 0 ? "" : ", "
      parameters += self.parameters[i].t.stringify(definition: true)
    }
    return self.returnType.stringify(declaration: true) + self.name + " (" + parameters + ");" + os_EOL
  }

  fn stringify (self: ref Self) str {
    mut parameters := ""
    loop i := 0; i < self.parameters.len; i++ {
      parameters += i == 0 ? "" : ", "
      parameters += self.parameters[i].stringify()
    }
    return self.returnType.stringify(declaration: true) + self.name + " (" + parameters + ") " +
      self.body.stringify(root: false)
  }
}

export obj CGotoStatement {
  mut label: str

  fn stringify (self: ref Self) str {
    return "goto " + self.label + ";"
  }
}

export obj CIfStatement {
  mut condition: CExpression
  mut consequent: CStatement
  mut alternate: CStatement?

  fn stringify (self: ref Self, indent: int) str {
    mut result := "if (" + self.condition.stringify() + ") " + self.consequent.stringify(indent, root: false)
    if self.alternate != nil {
      result += os_EOL + ' '.repeat(indent) + "else " + self.alternate.stringify(indent, root: false)
    }
    return result
  }
}

export obj CIncludeDirective {
  mut path: str

  fn stringify (self: ref Self) str {
    return "#include <" + self.path + ">"
  }
}

export obj CLabelStatement {
  mut name: str

  fn stringify (self: ref Self) str {
    return self.name + ":" + os_EOL
  }
}

export obj CReturnStatement {
  mut argument: CExpression?

  fn stringify (self: ref Self) str {
    return "return" + (self.argument == nil ? "" : " " + self.argument.stringify()) + ";"
  }
}

export obj CStructureDeclaration {
  mut name: str?
  mut body: CStatement

  fn definition (self: ref Self) str {
    if self.name == nil {
      throw error_NewError("Structure name is required for definition")
    }

    structureName := self.name as str
    return "struct " + structureName + ";" + os_EOL
  }

  fn stringify (self: ref Self, terminated: bool) str {
    structureName := self.name == nil ? "" : self.name + " "
    return "struct " + structureName + self.body.stringify(root: false) + (terminated ? ";" : "")
  }
}

export obj CStructureMemberDeclaration {
  mut t: CType
  mut name: str

  fn stringify (self: ref Self) str {
    return self.t.stringify(declaration: true) + self.name + ";"
  }
}

export obj CSwitchStatement {
  mut discriminant: CExpression
  mut body: CStatement

  fn stringify (self: ref Self, indent: int) str {
    return "switch (" + self.discriminant.stringify() + ") " + self.body.stringify(indent, root: false)
  }
}

export obj CTypedefDeclaration {
  mut specifier: CType | CStatement
  mut name: str

  fn stringify (self: ref Self) str {
    mut specifierCode := ""
    selfSpecifier := self.specifier

    if self.specifier is CStatement {
      selfSpecifier := selfSpecifier as CStatement
      specifierCode = selfSpecifier.stringify(root: false) + " "
    } else {
      selfSpecifier := selfSpecifier as CType
      specifierCode = selfSpecifier.stringify(declaration: true)
    }

    return "typedef " + specifierCode + self.name + ";"
  }
}

export obj CVariableDeclaration {
  mut t: CType
  mut name: str
  mut initializer: CExpression?

  fn stringify (self: ref Self, terminated: bool) str {
    mut result := self.t.stringify(declaration: true) + self.name
    if self.initializer != nil {
      result += " = " + self.initializer.stringify()
    }
    return result + (terminated ? ";" : "")
  }
}

export obj CWhileStatement {
  mut condition: CExpression
  mut body: CStatement

  fn stringify (self: ref Self, indent: int) str {
    return "while (" + self.condition.stringify() + ") " + self.body.stringify(indent, root: false)
  }
}

export fn createFunctionParameter (t: CType, name := "") CFunctionParameter {
  return CFunctionParameter{t: t, name: name}
}

export fn createIdentifier (name: str) CExpression {
  return createExpression(CIdentifier{name: name})
}

export fn createLiteral (value: str) CExpression {
  return createExpression(CLiteral{intValue: 0, stringValue: value})
}

export fn createAssignmentExpression (left: CExpression, operator: str, right: CExpression) CExpression {
  return createExpression(CAssignmentExpression{left: left, operator: operator, right: right})
}

export fn createBinaryExpression (left: CExpression, operator: str, right: CExpression) CExpression {
  return createExpression(CBinaryExpression{left: left, operator: operator, right: right})
}

export fn createCallExpression (callee: CExpression, arguments: (CExpression | CType)[] = []) CExpression {
  return createExpression(CCallExpression{callee: callee, arguments: arguments})
}

export fn createCastExpression (t: CType, argument: CExpression) CExpression {
  return createExpression(CCastExpression{t: t, argument: argument})
}

export fn createCommaExpression (left: CExpression, right: CExpression) CExpression {
  return createExpression(CCommaExpression{left: left, right: right})
}

export fn createConditionalExpression (
  condition: CExpression,
  consequent: CExpression,
  alternate: CExpression,
) CExpression {
  return createExpression(CConditionalExpression{condition: condition, consequent: consequent, alternate: alternate})
}

export fn createElementAccessExpression (expression: CExpression, element: CExpression) CExpression {
  return createExpression(CElementAccessExpression{expression: expression, element: element})
}

export fn createInitializerListExpression (items: CExpression[]) CExpression {
  return createExpression(CInitializerListExpression{items: items})
}

export fn createMacroInvocation (callee: str, arguments: (CExpression | CStatement | CType)[]) CExpression {
  return createExpression(CMacroInvocation{callee: callee, arguments: arguments})
}

export fn createPropertyAccessExpression (expression: CExpression, property: str, pointed := false) CExpression {
  return createExpression(CPropertyAccessExpression{expression: expression, property: property, pointed: pointed})
}

export fn createUnaryExpression (operator: str, argument: CExpression, postfix := false) CExpression {
  return createExpression(CUnaryExpression{argument: argument, operator: operator, postfix: postfix})
}

export fn createBreakStatement () CStatement {
  return createStatement(CBreakStatement{})
}

export fn createCaseStatement (test: CExpression?, body: CStatement) CStatement {
  return createStatement(CCaseStatement{test: test, body: body})
}

export fn createCompoundStatement (body: CStatement[]) CStatement {
  return createStatement(CCompoundStatement{body: body})
}

export fn createConditionalDirective (condition: str, consequent: CStatement[], alternate: CStatement? = nil) CStatement {
  return createStatement(CConditionalDirective{condition: condition, consequent: consequent, alternate: alternate})
}

export fn createContinueStatement () CStatement {
  return createStatement(CContinueStatement{})
}

export fn createDefineDirective (name: str, params: str[]? = nil, value := "") CStatement {
  return params == nil
    ? createStatement(CDefineDirective{name: name, value: value})
    : createStatement(CDefineDirective{name: name, isFunction: true, params: params, value: value})
}

export fn createEmptyStatement () CStatement {
  return createStatement(CEmptyStatement{})
}

export fn createExpressionStatement (expression: CExpression, terminated := true) CStatement {
  return createStatement(CExpressionStatement{expression: expression}, terminated: terminated)
}

export fn createForStatement (
  initializer: CStatement?,
  condition: CExpression?,
  update: CExpression?,
  body: CStatement,
) CStatement {
  return createStatement(CForStatement{initializer: initializer, condition: condition, update: update, body: body})
}

export fn createFunctionDeclaration (
  returnType: CType,
  name: str,
  parameters: CFunctionParameter[],
  body: CStatement,
) CStatement {
  return createStatement(CFunctionDeclaration{
    returnType: returnType,
    name: name,
    parameters: parameters,
    body: body,
  })
}

export fn createGotoStatement (label: str) CStatement {
  return createStatement(CGotoStatement{label: label})
}

export fn createIfStatement (condition: CExpression, consequent: CStatement, alternate: CStatement? = nil) CStatement {
  return createStatement(CIfStatement{condition: condition, consequent: consequent, alternate: alternate})
}

export fn createIncludeDirective (path: str) CStatement {
  return createStatement(CIncludeDirective{path: path})
}

export fn createLabelStatement (name: str) CStatement {
  return createStatement(CLabelStatement{name: name})
}

export fn createReturnStatement (argument: CExpression? = nil) CStatement {
  return createStatement(CReturnStatement{argument: argument})
}

export fn createStructureDeclaration (name: str?, body: CStatement, terminated := true) CStatement {
  return createStatement(CStructureDeclaration{name: name, body: body}, terminated: terminated)
}

export fn createStructureMemberDeclaration (t: CType, name: str) CStatement {
  return createStatement(CStructureMemberDeclaration{t: t, name: name})
}

export fn createSwitchStatement (discriminant: CExpression, body: CStatement) CStatement {
  return createStatement(CSwitchStatement{discriminant: discriminant, body: body})
}

export fn createTypedefDeclaration (specifier: CType | CStatement, name: str) CStatement {
  return createStatement(CTypedefDeclaration{specifier: specifier, name: name})
}

export fn createVariableDeclaration (t: CType, name: str, initializer: CExpression? = nil, terminated := true) CStatement {
  return createStatement(CVariableDeclaration{t: t, name: name, initializer: initializer}, terminated: terminated)
}

export fn createWhileStatement (condition: CExpression, body: CStatement) CStatement {
  return createStatement(CWhileStatement{condition: condition, body: body})
}

export fn createExpression (body: CExpressionBody, parenthesized := false) CExpression {
  return CExpression{body: body, parenthesized: parenthesized}
}

export fn createStatement (body: CStatementBody, terminated := true) CStatement {
  return CStatement{body: body, terminated: terminated}
}

export fn createType (value: str, constant := false, reference := false) CType {
  return CType{constant: constant, reference: reference, value: value}
}
