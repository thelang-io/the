/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

export fn E0000 (unexpected: char, expected := '\0') str {
  return "E0000 - Unexpected character `" + unexpected.str() + "`" +
    (expected == '\0' ? "" : ", expected `" + expected.str() + "`")
}

export fn E0001 () str {
  return "E0001 - Unterminated comment"
}

export fn E0002 () str {
  return "E0002 - Unterminated character literal"
}

export fn E0003 () str {
  return "E0003 - Unterminated string literal"
}

export fn E0004 () str {
  return "E0004 - Empty character literal"
}

export fn E0005 () str {
  return "E0005 - Illegal character escape sequence"
}

export fn E0006 () str {
  return "E0006 - Illegal string escape sequence"
}

export fn E0007 () str {
  return "E0007 - Too many characters in character literal"
}

export fn E0008 () str {
  return "E0008 - Leading zero integer literals are not allowed"
}

export fn E0009 (t: str) str {
  return "E0009 - Invalid " + t + " integer literal"
}

export fn E0010 () str {
  return "E0010 - Invalid float literal"
}

export fn E0011 () str {
  return "E0011 - Invalid float literal exponent"
}

export fn E0012 (t: str) str {
  return "E0012 - " + t.upperFirst + " float literals are not allowed"
}

export fn E0100 (kw: str) str {
  return "E0100 - Expected opening brace after `" + kw + "` keyword"
}

export fn E0101 () str {
  return "E0101 - Expected block statement closing brace"
}

export fn E0102 (after: str) str {
  return "E0102 - Expected opening brace after " + after
}

export fn E0103 (after: str) str {
  return "E0103 - Expected closing parenthesis after " + after
}

export fn E0104 (unexpected: str) str {
  return "E0104 - Unexpected token `" + unexpected + "`"
}

export fn E0105 () str {
  return "E0105 - Expected call expression argument"
}

export fn E0106 (after: str) str {
  return "E0106 - Expected comma after " + after
}

export fn E0107 (after: str) str {
  return "E0107 - Expected expression after " + after
}

export fn E0108 (in: str) str {
  return "E0108 - Expected expression in " + in
}

export fn E0109 (kw: str) str {
  return "E0109 - Expected expression after `" + kw + "` keyword"
}

export fn E0110 () str {
  return "E0110 - Expected conditional expression alternate after colon"
}

export fn E0111 (op: str) str {
  return "E0111 - Expected right-hand expression after `" + op + "` operator"
}

export fn E0112 () str {
  return "E0112 - Expected conditional expression consequent after question mark"
}

export fn E0113 (after: str) str {
  return "E0113 - Expected colon after " + after
}

export fn E0114 () str {
  return "E0114 - Expected element access expression argument after opening bracket"
}

export fn E0115 (after: str) str {
  return "E0115 - Expected closing bracket after " + after
}

export fn E0116 (in: str) str {
  return "E0116 - Expected closing bracket in " + in
}

export fn E0117 (in: str) str {
  return "E0117 - Expected closing brace in " + in
}

export fn E0118 () str {
  return "E0118 - Expected map expression key"
}

export fn E0119 () str {
  return "E0119 - Expected map expression value after colon"
}

export fn E0120 () str {
  return "E0120 - Expected object expression property name"
}

export fn E0121 () str {
  return "E0121 - Expected object expression property value after colon"
}

export fn E0122 () str {
  return "E0122 - Expected unary expression operand after operator"
}

export fn E0123 (kw: str) str {
  return "E0123 - Expected type after `" + kw + "` keyword"
}

// export fn E0124 () str {
//   return "E0124 - Expected closure expression closing parenthesis"
// }

export fn E0125 () str {
  return "E0125 - Expected closure expression parameter name"
}

export fn E0126 () str {
  return "E0126 - Expected closure expression parameter type or initializer after parameter name"
}

export fn E0127 () str {
  return "E0127 - Expected closure expression parameter type after colon"
}

export fn E0128 (after: str) str {
  return "E0128 - Expected closure expression parameter initializer after " + after
}

export fn E0129 () str {
  return "E0129 - Expected arrow after closure expression parameters"
}

export fn E0130 () str {
  return "E0130 - Expected closure expression return type after arrow"
}

export fn E0131 (kw: str) str {
  return "E0131 - Expected variable declaration name after `" + kw + "` keyword"
}

export fn E0132 () str {
  return "E0132 - Expected variable declaration type or initializer after name"
}

export fn E0133 () str {
  return "E0133 - Expected variable declaration type after name"
}

export fn E0134 (after: str) str {
  return "E0134 - Expected variable declaration initializer after " + after
}

export fn E0135 () str {
  return "E0135 - Expected member type identifier after dot"
}

export fn E0136 () str {
  return "E0136 - Expected map type value type after opening bracket"
}

export fn E0137 () str {
  return "E0137 - Expected union subtype after pipe operator"
}

export fn E0138 (after: str) str {
  return "E0138 - Expected type after " + after
}

export fn E0139 (after: str) str {
  return "E0139 - Expected identifier after " + after
}

export fn E0140 () str {
  return "E0140 - Expected function type parameter type"
}

// export fn E0141 () str {
//   return "E0141 - Expected function type parameter type after parameter name"
// }

export fn E0142 () str {
  return "E0142 - Expected function type parameter type after colon"
}

export fn E0143 () str {
  return "E0143 - Expected arrow after function type parameters"
}

export fn E0144 () str {
  return "E0144 - Expected function type return type after arrow"
}

export fn E0145 () str {
  return "E0145 - Expected enumeration declaration name after `enum` keyword"
}

export fn E0146 (after: str) str {
  return "E0146 - Expected closing brace after " + after
}

export fn E0147 () str {
  return "E0147 - Expected enumeration declaration member name"
}

export fn E0148 () str {
  return "E0148 - Expected enumeration declaration member initializer after colon"
}

export fn E0149 (kw: str) str {
  return "E0149 - Expected identifier after `" + kw + "` keyword"
}

// export fn E0150 () str {
//   return "E0150 - Expected closure expression body"
// }

export fn E0151 () str {
  return "E0151 - Expected if statement consequent statement"
}

export fn E0152 () str {
  return "E0152 - Expected if statement alternate statement"
}

// export fn E0153 () str {
//   return "E0153 - Expected main declaration body"
// }

export fn E0154 () str {
  return "E0154 - Expected equals sign after type alias declaration name"
}

export fn E0155 () str {
  return "E0155 - Expected loop statement closing parenthesis"
}

export fn E0156 () str {
  return "E0156 - Expected semicolon after loop statement initializer"
}

export fn E0157 () str {
  return "E0157 - Expected semicolon after loop statement condition"
}

export fn E0158 () str {
  return "E0158 - Expected loop statement body"
}

export fn E0159 () str {
  return "E0159 - Expected try statement body"
}

export fn E0160 () str {
  return "E0160 - Expected `catch` keyword after try statement body"
}

export fn E0161 () str {
  return "E0161 - Expected try statement handler parameter declaration after `catch` keyword"
}

export fn E0162 () str {
  return "E0162 - Expected try statement handler body after handler parameter declaration"
}

export fn E0163 (after: str) str {
  return "E0163 - Expected opening parenthesis after " + after
}

export fn E0164 () str {
  return "E0164 - Expected function declaration parameter name"
}

export fn E0165 () str {
  return "E0165 - Expected function declaration parameter type or initializer after parameter name"
}

export fn E0166 () str {
  return "E0166 - Expected function declaration parameter type after colon"
}

export fn E0167 (after: str) str {
  return "E0167 - Expected function declaration parameter initializer after " + after
}

export fn E0168 () str {
  return "E0168 - Expected function definition"
}

// export fn E0169 () str {
//   return "E0169 - Expected function declaration return type"
// }

export fn E0170 () str {
  return "E0170 - Expected object declaration body property or method"
}

export fn E0171 () str {
  return "E0171 - Expected object declaration body closing brace"
}

export fn E0172 () str {
  return "E0172 - Expected export declaration or expression after `export` keyword"
}

export fn E0173 () str {
  return "E0173 - Expected `from` keyword after import declaration specifiers"
}

export fn E0174 () str {
  return "E0174 - Expected `as` keyword after import declaration namespace specifier"
}

export fn E0175 () str {
  return "E0175 - Expected import declaration namespace specifier name after `as` keyword"
}

export fn E0176 () str {
  return "E0176 - Expected import declaration specifier local name after `as` keyword"
}

export fn E0177 () str {
  return "E0177 - Expected import declaration source after `from` keyword"
}
