/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as t from "./types"

fn indentResult (s: str, indent: int) str {
  lines := s.lines()
  linesLen := lines.len
  mut result: str
  loop i := 0; i < linesLen; i++ {
    result += ' '.repeat(indent) + lines[i] + os_EOL
  }
  return result.trimEnd()
}

export fn expression (self: t.Expression) str {
  if self.isIdentifier() {
    body := self.asIdentifier()
    return body.name
  } elif self.isBooleanLiteral() {
    body := self.asBooleanLiteral()
    return body.value
  } elif self.isCharacterLiteral() {
    body := self.asCharacterLiteral()
    return body.raw
  } elif self.isFloatingPointLiteral() {
    body := self.asFloatingPointLiteral()
    return body.value
  } elif self.isIntegerLiteral() {
    body := self.asIntegerLiteral()
    return body.value
  } elif self.isNilLiteral() {
    return "nil"
  } elif self.isStringLiteral() {
    body := self.asStringLiteral()
    return body.raw
  } elif self.isArray() {
    body := self.asArray()
    mut elements: str[]
    body.elements.forEach((it: t.Expression, idx: int) -> void {
      elements.push(expression(it))
    })
    return "[" + elements.join(", ") + "]"
  } elif self.isAs() {
    body := self.asAs()
    return expression(body.expression) + " as " + typeT(body.t)
  } elif self.isAssignment() {
    body := self.asAssignment()
    return expression(body.left) + " " + body.operator.val + " " + expression(body.right)
  } elif self.isAwait() {
    body := self.asAwait()
    return "await " + expression(body.expression)
  } elif self.isBinary() {
    body := self.asBinary()
    return expression(body.left) + " " + body.operator.val + " " + expression(body.right)
  } elif self.isCall() {
    body := self.asCall()
    mut arguments: str[]
    body.arguments.forEach((it: t.CallExpressionArgument, idx: int) -> void {
      mut result := expression(it.expression)
      if it.name != nil {
        result = it.name.name + ": " + result
      }
      arguments.push(result)
    })
    return expression(body.callee) + "(" + arguments.join(", ") + ")"
  } elif self.isClosure() {
    body := self.asClosure()
    mut parameters: str[]
    body.parameters.forEach((it: t.FunctionParameter, idx: int) -> void {
      mut result := (it.mutable ? "mut " : "") + it.name.name

      if it.t != nil {
        result += ": " + typeT(it.t)
        if it.initializer != nil {
          result += " = " + expression(it.initializer)
        }
      } elif it.initializer != nil {
        result += " := " + expression(it.initializer)
      }

      result += it.variadic ? "..." : ""
      parameters.push(result)
    })
    return (body.asynchronous ? "async " : "") + "(" + parameters.join(", ") + ")" +
      " -> " + typeT(body.returnType) + " " + statement(body.body)
  } elif self.isConditional() {
    body := self.asConditional()
    return expression(body.condition) + " ? " + expression(body.consequent) + " : " + expression(body.alternate)
  } elif self.isElementAccess() {
    body := self.asElementAccess()
    return expression(body.expression) + "[" + expression(body.argument) + "]"
  } elif self.isIs() {
    body := self.asIs()
    return expression(body.expression) + " is " + typeT(body.t)
  } elif self.isMap() {
    body := self.asMap()
    mut elements: str[]
    body.elements.forEach((it: t.MapExpressionElement, idx: int) -> void {
      elements.push(expression(it.key) + ": " + expression(it.value))
    })
    return "{" + elements.join(", ") + "}"
  } elif self.isMemberAccess() {
    body := self.asMemberAccess()
    return "." + body.name.name
  } elif self.isObject() {
    body := self.asObject()
    mut properties: str[]
    body.properties.forEach((it: t.ObjectExpressionProperty, idx: int) -> void {
      properties.push(it.name.name + ": " + expression(it.value))
    })
    return typeT(body.id) + "{" + properties.join(", ") + "}"
  } elif self.isParenthesized() {
    body := self.asParenthesized()
    return "(" + expression(body.expression) + ")"
  } elif self.isPropertyAccess() {
    body := self.asPropertyAccess()
    return expression(body.expression) + "." + body.name.name
  } elif self.isReference() {
    body := self.asReference()
    return "ref " + expression(body.expression)
  } elif self.isUnary() {
    body := self.asUnary()
    if body.prefix {
      return body.operator.val + expression(body.operand)
    } else {
      return expression(body.operand) + body.operator.val
    }
  }

  throw error_NewError("Unable to stringify expression")
}

export fn statement (self: t.Statement, indent := 0) str {
  mut result := ' '.repeat(indent)
  if self.isBlock() {
    body := self.asBlock()
    bodyLen := body.body.len
    if body.body.empty {
      return result + "{}"
    }
    result += "{" + os_EOL
    loop i := 0; i < bodyLen; i++ {
      result += statement(body.body[i], indent: indent + 2) + os_EOL
    }
    result += ' '.repeat(indent) + "}"
    return result
  } elif self.isBreak() {
    body := self.asBreak()
    return result + "break"
  } elif self.isContinue() {
    body := self.asContinue()
    return result + "continue"
  } elif self.isEmpty() {
    body := self.asEmpty()
    return result + ";"
  } elif self.isEnumDeclaration() {
    body := self.asEnumDeclaration()
    mut members: str[]
    body.members.forEach((it: t.EnumDeclarationMember, idx: int) -> void {
      mut member := ' '.repeat(indent + 2) + it.name.name
      if it.initializer != nil {
        member += " = " + expression(it.initializer)
      }
      members.push(member)
    })
    result += "enum " + body.name.name + " {" + os_EOL
    result += members.join("," + os_EOL) + os_EOL
    result += ' '.repeat(indent) + "}"
    return result
  } elif self.isExportDeclaration() {
    body := self.asExportDeclaration()
    return result + "export " + statement(body.statement, indent: indent).trimStart()
  } elif self.isExportNamedDeclaration() {
    body := self.asExportNamedDeclaration()
    return result + "export " + expression(body.expression)
  } elif self.isExpression() {
    body := self.asExpression()
    return indentResult(expression(body.expression), indent)
  } elif self.isFunctionDeclaration() {
    body := self.asFunctionDeclaration()
    mut parameters: str[]
    body.parameters.forEach((it: t.FunctionParameter, idx: int) -> void {
      mut parameter := (it.mutable ? "mut " : "") + it.name.name

      if it.t != nil {
        parameter += ": " + typeT(it.t)
        if it.initializer != nil {
          parameter += " = " + expression(it.initializer)
        }
      } elif it.initializer != nil {
        parameter += " := " + expression(it.initializer)
      }

      parameter += it.variadic ? "..." : ""
      parameters.push(parameter)
    })
    result += (body.asynchronous ? "async " : "") + "fn " + body.name.name
    result += " (" + parameters.join(", ") + ")"
    result += body.returnType != nil ? " " + typeT(body.returnType) : ""
    result += " " + statement(body.body, indent: indent).trimStart()
    return result
  } elif self.isIf() {
    body := self.asIf()
    result += "if " + expression(body.condition) + " " + statement(body.consequent, indent: indent).trimStart()
    if body.alternate != nil {
      if body.consequent.isBlock() && body.alternate.isIf() {
        result += " el" + statement(body.alternate, indent: indent).trimStart()
      } elif body.consequent.isBlock() {
        result += " else " + statement(body.alternate, indent: indent).trimStart()
      } elif body.alternate.isIf() {
        result += os_EOL + ' '.repeat(indent) + "el" + statement(body.alternate, indent: indent).trimStart()
      } else {
        result += os_EOL + ' '.repeat(indent) + "else " + statement(body.alternate, indent: indent).trimStart()
      }
    }
    return result
  } elif self.isImportDeclaration() {
    body := self.asImportDeclaration()
    mut specifiers: str[]
    body.specifiers.forEach((it: t.ImportDeclarationSpecifier, idx: int) -> void {
      if it is t.ImportSpecifier {
        if it.imported.name == it.local.name {
          specifiers.push(it.imported.name)
        } else {
          specifiers.push(it.imported.name + " as " + it.local.name)
        }
      } else {
        specifiers.push("* as " + it.name.name)
      }
    })
    result += "import " + (specifiers.empty ? "" : specifiers.join(", ") + " from ")
    result += expression(body.source)
    return result
  } elif self.isLoop() {
    body := self.asLoop()
    bodyInitializer2 := body.initializer
    bodyUpdate2 := body.update
    mut parts: str

    if body.condition != nil && bodyInitializer2 == nil && bodyUpdate2 == nil {
      parts += expression(body.condition)
    } elif body.initializer != nil || body.condition != nil || body.update != nil {
      if body.initializer != nil {
        parts += statement(body.initializer, indent: indent).trimStart()
      }
      parts += ";"
      if body.condition != nil {
        parts += " " + expression(body.condition)
      }
      parts += ";"
      if body.update != nil {
        parts += " " + expression(body.update)
      }
    }

    result += "loop " + (parts.empty ? "" : (body.parenthesized ? "(" + parts + ")" : parts) + " ")
    result += statement(body.body, indent: indent).trimStart()
    return result
  } elif self.isMainDeclaration() {
    body := self.asMainDeclaration()
    return result + "main " + statement(body.body, indent: indent).trimStart()
  } elif self.isObjectDeclaration() {
    body := self.asObjectDeclaration()
    bodyLen := body.body.len
    result += "obj " + body.name.name + " {"
    if body.body.empty {
      return result + "}"
    }
    result += os_EOL
    loop i := 0; i < bodyLen; i++ {
      result += statement(body.body[i], indent: indent + 2) + os_EOL
    }
    result += ' '.repeat(indent) + "}"
    return result
  } elif self.isObjectDeclarationMethod() {
    body := self.asObjectDeclarationMethod()
    mut parameters: str[]
    body.parameters.forEach((it: t.FunctionParameter, idx: int) -> void {
      mut parameter := (it.mutable ? "mut " : "") + it.name.name

      if it.t != nil {
        parameter += ": " + typeT(it.t)
        if it.initializer != nil {
          parameter += " = " + expression(it.initializer)
        }
      } elif it.initializer != nil {
        parameter += " := " + expression(it.initializer)
      }

      parameter += it.variadic ? "..." : ""
      parameters.push(parameter)
    })
    result += (body.asynchronous ? "async " : "") + "fn " + body.name.name
    result += " (" + parameters.join(", ") + ")"
    result += body.returnType != nil ? " " + typeT(body.returnType) : ""
    result += " " + statement(body.body, indent: indent).trimStart()
    return result
  } elif self.isObjectDeclarationProperty() {
    body := self.asObjectDeclarationProperty()
    result += (body.mutable ? "mut " : "")
    result += body.name.name
    if body.t != nil {
      result += ": " + typeT(body.t)
    }
    return result
  } elif self.isReturn() {
    body := self.asReturn()
    return result + "return" + (body.expression == nil ? "" : " " + expression(body.expression))
  } elif self.isThrow() {
    body := self.asThrow()
    return result + "throw " + expression(body.expression)
  } elif self.isTry() {
    body := self.asTry()
    handlersLen := body.handlers.len
    result += "try " + statement(body.body, indent: indent).trimStart()
    loop i := 0; i < handlersLen; i++ {
      handler := body.handlers[i] as t.TryStatementHandler
      result += " catch " + statement(handler.parameter, indent: indent).trimStart()
      result += " " + statement(handler.body, indent: indent).trimStart()
    }
    return result
  } elif self.isTypeAliasDeclaration() {
    body := self.asTypeAliasDeclaration()
    return result + "type " + body.name.name + " = " + typeT(body.t)
  } elif self.isVariableDeclaration() {
    body := self.asVariableDeclaration()
    result += (body.constant ? "const " : "") + (body.mutable ? "mut " : "")
    result += body.name.name
    if body.t != nil {
      result += ": " + typeT(body.t)
      if body.initializer != nil {
        result += " = " + expression(body.initializer)
      }
    } elif body.initializer != nil {
      result += " := " + expression(body.initializer)
    }
    return result
  }

  throw error_NewError("Unable to stringify statement")
}

export fn typeT (self: t.Type) str {
  if self.isArray() {
    body := self.asArray()
    return typeT(body.elementType) + "[]"
  } elif self.isFunction() {
    body := self.asFunction()
    mut parameters: str[]
    body.parameters.forEach((it: t.FunctionTypeParameter, idx: int) -> void {
      mut result: str
      if it.name != nil {
        result += (it.mutable ? "mut " : "") + it.name.name + ": "
      }
      result += typeT(it.t) + (it.variadic ? "..." : "")
      parameters.push(result)
    })
    return (body.asynchronous ? "async " : "") + "(" + parameters.join(", ") + ")" +
      " -> " + typeT(body.returnType)
  } elif self.isIdentifier() {
    body := self.asIdentifier()
    return body.name.name
  } elif self.isMap() {
    body := self.asMap()
    return typeT(body.valueType) + "[" + typeT(body.keyType) + "]"
  } elif self.isMember() {
    body := self.asMember()
    return typeT(body.t) + "." + body.name.name
  } elif self.isOptional() {
    body := self.asOptional()
    return typeT(body.t) + "?"
  } elif self.isParenthesized() {
    body := self.asParenthesized()
    return "(" + typeT(body.t) + ")"
  } elif self.isReference() {
    body := self.asReference()
    return "ref " + typeT(body.t)
  } elif self.isUnion() {
    body := self.asUnion()
    mut types: str[]
    body.types.forEach((it: t.Type, idx: int) -> void {
      types.push(typeT(it))
    })
    return types.join(" | ")
  }

  throw error_NewError("Unable to stringify type")
}
