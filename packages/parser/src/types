/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

export obj ParserError {
  message: str
  stack: str
}

export obj Token {
  mut t: TokenType
  mut val: str
  mut start: int
  mut end: int
}

export type TypeBody =
  ArrayType |
  DummyType |
  FunctionType |
  IdentifierType |
  MapType |
  MemberType |
  OptionalType |
  ParenthesizedType |
  ReferenceType |
  UnionType

export type ExpressionBody =
  Identifier |

  BooleanLiteral |
  CharacterLiteral |
  FloatingPointLiteral |
  IntegerLiteral |
  NilLiteral |
  StringLiteral |

  ArrayExpression |
  AsExpression |
  AssignmentExpression |
  AwaitExpression |
  BinaryExpression |
  CallExpression |
  ClosureExpression |
  ConditionalExpression |
  ElementAccessExpression |
  DummyExpression |
  IsExpression |
  MapExpression |
  MemberAccessExpression |
  ObjectExpression |
  ParenthesizedExpression |
  PropertyAccessExpression |
  ReferenceExpression |
  UnaryExpression

export type StatementBody =
  BlockStatement |
  BreakStatement |
  ContinueStatement |
  DummyStatement |
  EmptyStatement |
  EnumDeclaration |
  EofStatement |
  ExportDeclaration |
  ExportNamedDeclaration |
  ExpressionStatement |
  FunctionDeclaration |
  IfStatement |
  ImportDeclaration |
  LoopStatement |
  MainDeclaration |
  ObjectDeclaration |
  ObjectDeclarationMethod |
  ObjectDeclarationProperty |
  ReturnStatement |
  ThrowStatement |
  TryStatement |
  TypeAliasDeclaration |
  VariableDeclaration

export obj Type {
  mut start: int
  mut end: int
  mut body: TypeBody
  mut leadingComments: Token[]
  mut trailingComments: Token[]
  mut context: any

  fn asArray (mut self: ref Self) ref ArrayType { return ref (self.body as ArrayType) }
  fn asFunction (mut self: ref Self) ref FunctionType { return ref (self.body as FunctionType) }
  fn asIdentifier (mut self: ref Self) ref IdentifierType { return ref (self.body as IdentifierType) }
  fn asMap (mut self: ref Self) ref MapType { return ref (self.body as MapType) }
  fn asMember (mut self: ref Self) ref MemberType { return ref (self.body as MemberType) }
  fn asOptional (mut self: ref Self) ref OptionalType { return ref (self.body as OptionalType) }
  fn asParenthesized (mut self: ref Self) ref ParenthesizedType { return ref (self.body as ParenthesizedType) }
  fn asReference (mut self: ref Self) ref ReferenceType { return ref (self.body as ReferenceType) }
  fn asUnion (mut self: ref Self) ref UnionType { return ref (self.body as UnionType) }

  fn isArray (self: ref Self) bool { return self.body is ArrayType }
  fn isFunction (self: ref Self) bool { return self.body is FunctionType }
  fn isIdentifier (self: ref Self) bool { return self.body is IdentifierType }
  fn isMap (self: ref Self) bool { return self.body is MapType }
  fn isMember (self: ref Self) bool { return self.body is MemberType }
  fn isOptional (self: ref Self) bool { return self.body is OptionalType }
  fn isParenthesized (self: ref Self) bool { return self.body is ParenthesizedType }
  fn isReference (self: ref Self) bool { return self.body is ReferenceType }
  fn isUnion (self: ref Self) bool { return self.body is UnionType }
}

export obj Expression {
  mut start: int
  mut end: int
  mut body: ExpressionBody
  mut leadingComments: Token[]
  mut trailingComments: Token[]
  mut context: any
  mut contextExtra: any
  mut _parent: (ref Expression)?
  mut _parentNode: (ref Statement)?

  fn asIdentifier (mut self: ref Self) ref Identifier { return ref (self.body as Identifier) }
  fn asBooleanLiteral (mut self: ref Self) ref BooleanLiteral { return ref (self.body as BooleanLiteral) }
  fn asCharacterLiteral (mut self: ref Self) ref CharacterLiteral { return ref (self.body as CharacterLiteral) }
  fn asFloatingPointLiteral (mut self: ref Self) ref FloatingPointLiteral { return ref (self.body as FloatingPointLiteral) }
  fn asIntegerLiteral (mut self: ref Self) ref IntegerLiteral { return ref (self.body as IntegerLiteral) }
  fn asNilLiteral (mut self: ref Self) ref NilLiteral { return ref (self.body as NilLiteral) }
  fn asStringLiteral (mut self: ref Self) ref StringLiteral { return ref (self.body as StringLiteral) }
  fn asArray (mut self: ref Self) ref ArrayExpression { return ref (self.body as ArrayExpression) }
  fn asAs (mut self: ref Self) ref AsExpression { return ref (self.body as AsExpression) }
  fn asAssignment (mut self: ref Self) ref AssignmentExpression { return ref (self.body as AssignmentExpression) }
  fn asAwait (mut self: ref Self) ref AwaitExpression { return ref (self.body as AwaitExpression) }
  fn asBinary (mut self: ref Self) ref BinaryExpression { return ref (self.body as BinaryExpression) }
  fn asCall (mut self: ref Self) ref CallExpression { return ref (self.body as CallExpression) }
  fn asClosure (mut self: ref Self) ref ClosureExpression { return ref (self.body as ClosureExpression) }
  fn asConditional (mut self: ref Self) ref ConditionalExpression { return ref (self.body as ConditionalExpression) }
  fn asElementAccess (mut self: ref Self) ref ElementAccessExpression { return ref (self.body as ElementAccessExpression) }
  fn asIs (mut self: ref Self) ref IsExpression { return ref (self.body as IsExpression) }
  fn asMap (mut self: ref Self) ref MapExpression { return ref (self.body as MapExpression) }
  fn asMemberAccess (mut self: ref Self) ref MemberAccessExpression { return ref (self.body as MemberAccessExpression) }
  fn asObject (mut self: ref Self) ref ObjectExpression { return ref (self.body as ObjectExpression) }
  fn asParenthesized (mut self: ref Self) ref ParenthesizedExpression { return ref (self.body as ParenthesizedExpression) }
  fn asPropertyAccess (mut self: ref Self) ref PropertyAccessExpression { return ref (self.body as PropertyAccessExpression) }
  fn asReference (mut self: ref Self) ref ReferenceExpression { return ref (self.body as ReferenceExpression) }
  fn asUnary (mut self: ref Self) ref UnaryExpression { return ref (self.body as UnaryExpression) }

  fn isIdentifier (self: ref Self) bool { return self.body is Identifier }
  fn isBooleanLiteral (self: ref Self) bool { return self.body is BooleanLiteral }
  fn isCharacterLiteral (self: ref Self) bool { return self.body is CharacterLiteral }
  fn isFloatingPointLiteral (self: ref Self) bool { return self.body is FloatingPointLiteral }
  fn isIntegerLiteral (self: ref Self) bool { return self.body is IntegerLiteral }
  fn isNilLiteral (self: ref Self) bool { return self.body is NilLiteral }
  fn isStringLiteral (self: ref Self) bool { return self.body is StringLiteral }
  fn isArray (self: ref Self) bool { return self.body is ArrayExpression }
  fn isAs (self: ref Self) bool { return self.body is AsExpression }
  fn isAssignment (self: ref Self) bool { return self.body is AssignmentExpression }
  fn isAwait (self: ref Self) bool { return self.body is AwaitExpression }
  fn isBinary (self: ref Self) bool { return self.body is BinaryExpression }
  fn isCall (self: ref Self) bool { return self.body is CallExpression }
  fn isClosure (self: ref Self) bool { return self.body is ClosureExpression }
  fn isConditional (self: ref Self) bool { return self.body is ConditionalExpression }
  fn isElementAccess (self: ref Self) bool { return self.body is ElementAccessExpression }
  fn isIs (self: ref Self) bool { return self.body is IsExpression }
  fn isMap (self: ref Self) bool { return self.body is MapExpression }
  fn isMemberAccess (self: ref Self) bool { return self.body is MemberAccessExpression }
  fn isObject (self: ref Self) bool { return self.body is ObjectExpression }
  fn isParenthesized (self: ref Self) bool { return self.body is ParenthesizedExpression }
  fn isPropertyAccess (self: ref Self) bool { return self.body is PropertyAccessExpression }
  fn isReference (self: ref Self) bool { return self.body is ReferenceExpression }
  fn isUnary (self: ref Self) bool { return self.body is UnaryExpression }

  fn getAccess (self: ref Self, withAssignment := false) ref Self {
    if withAssignment && self.isAssignment() {
      expression := self.asAssignment()
      return expression.left.getAccess(withAssignment: withAssignment)
    } elif self.isParenthesized() {
      expression := self.asParenthesized()
      return expression.expression.getAccess(withAssignment: withAssignment)
    } elif self.isAccess() {
      return self
    }

    throw error_NewError("Unable to get access expression")
  }

  fn hasParent (self: ref Self) bool {
    return self._parent != nil
  }

  fn hasParentNode (self: ref Self) bool {
    return self._parentNode != nil
  }

  fn isAccess (self: ref Self, withAssignment := false) bool {
    if withAssignment && self.isAssignment() {
      expression := self.asAssignment()
      return expression.left.isAccess(withAssignment: withAssignment)
    } elif self.isParenthesized() {
      expression := self.asParenthesized()
      return expression.expression.isAccess(withAssignment: withAssignment)
    }

    return self.isIdentifier() || self.isElementAccess() || self.isPropertyAccess()
  }

  fn parent (self: ref Self) ref Expression {
    if self._parent != nil {
      return self._parent
    }
    throw ParserError{message: "Tried accessing nil parent"}
  }

  fn parentNode (self: ref Self) ref Statement {
    if self._parentNode != nil {
      return self._parentNode
    }
    throw ParserError{message: "Tried accessing nil parent node"}
  }
}

export obj Statement {
  mut start: int
  mut end: int
  mut body: StatementBody
  mut leadingComments: Token[]
  mut trailingComments: Token[]
  mut context: any
  mut _next: (ref Statement)?
  mut _parent: (ref Statement)?
  mut _prev: (ref Statement)?

  fn asBlock (mut self: ref Self) ref BlockStatement { return ref (self.body as BlockStatement) }
  fn asBreak (mut self: ref Self) ref BreakStatement { return ref (self.body as BreakStatement) }
  fn asContinue (mut self: ref Self) ref ContinueStatement { return ref (self.body as ContinueStatement) }
  fn asEmpty (mut self: ref Self) ref EmptyStatement { return ref (self.body as EmptyStatement) }
  fn asEnumDeclaration (mut self: ref Self) ref EnumDeclaration { return ref (self.body as EnumDeclaration) }
  fn asEof (mut self: ref Self) ref EofStatement { return ref (self.body as EofStatement) }
  fn asExportDeclaration (mut self: ref Self) ref ExportDeclaration { return ref (self.body as ExportDeclaration) }
  fn asExportNamedDeclaration (mut self: ref Self) ref ExportNamedDeclaration { return ref (self.body as ExportNamedDeclaration) }
  fn asExpression (mut self: ref Self) ref ExpressionStatement { return ref (self.body as ExpressionStatement) }
  fn asFunctionDeclaration (mut self: ref Self) ref FunctionDeclaration { return ref (self.body as FunctionDeclaration) }
  fn asIf (mut self: ref Self) ref IfStatement { return ref (self.body as IfStatement) }
  fn asImportDeclaration (mut self: ref Self) ref ImportDeclaration { return ref (self.body as ImportDeclaration) }
  fn asLoop (mut self: ref Self) ref LoopStatement { return ref (self.body as LoopStatement) }
  fn asMainDeclaration (mut self: ref Self) ref MainDeclaration { return ref (self.body as MainDeclaration) }
  fn asObjectDeclaration (mut self: ref Self) ref ObjectDeclaration { return ref (self.body as ObjectDeclaration) }
  fn asObjectDeclarationMethod (mut self: ref Self) ref ObjectDeclarationMethod { return ref (self.body as ObjectDeclarationMethod) }
  fn asObjectDeclarationProperty (mut self: ref Self) ref ObjectDeclarationProperty { return ref (self.body as ObjectDeclarationProperty) }
  fn asReturn (mut self: ref Self) ref ReturnStatement { return ref (self.body as ReturnStatement) }
  fn asThrow (mut self: ref Self) ref ThrowStatement { return ref (self.body as ThrowStatement) }
  fn asTry (mut self: ref Self) ref TryStatement { return ref (self.body as TryStatement) }
  fn asTypeAliasDeclaration (mut self: ref Self) ref TypeAliasDeclaration { return ref (self.body as TypeAliasDeclaration) }
  fn asVariableDeclaration (mut self: ref Self) ref VariableDeclaration { return ref (self.body as VariableDeclaration) }

  fn isBlock (self: ref Self) bool { return self.body is BlockStatement }
  fn isBreak (self: ref Self) bool { return self.body is BreakStatement }
  fn isContinue (self: ref Self) bool { return self.body is ContinueStatement }
  fn isEmpty (self: ref Self) bool { return self.body is EmptyStatement }
  fn isEnumDeclaration (self: ref Self) bool { return self.body is EnumDeclaration }
  fn isEof (self: ref Self) bool { return self.body is EofStatement }
  fn isExportDeclaration (self: ref Self) bool { return self.body is ExportDeclaration }
  fn isExportNamedDeclaration (self: ref Self) bool { return self.body is ExportNamedDeclaration }
  fn isExpression (self: ref Self) bool { return self.body is ExpressionStatement }
  fn isFunctionDeclaration (self: ref Self) bool { return self.body is FunctionDeclaration }
  fn isIf (self: ref Self) bool { return self.body is IfStatement }
  fn isImportDeclaration (self: ref Self) bool { return self.body is ImportDeclaration }
  fn isLoop (self: ref Self) bool { return self.body is LoopStatement }
  fn isMainDeclaration (self: ref Self) bool { return self.body is MainDeclaration }
  fn isObjectDeclaration (self: ref Self) bool { return self.body is ObjectDeclaration }
  fn isObjectDeclarationMethod (self: ref Self) bool { return self.body is ObjectDeclarationMethod }
  fn isObjectDeclarationProperty (self: ref Self) bool { return self.body is ObjectDeclarationProperty }
  fn isReturn (self: ref Self) bool { return self.body is ReturnStatement }
  fn isThrow (self: ref Self) bool { return self.body is ThrowStatement }
  fn isTry (self: ref Self) bool { return self.body is TryStatement }
  fn isTypeAliasDeclaration (self: ref Self) bool { return self.body is TypeAliasDeclaration }
  fn isVariableDeclaration (self: ref Self) bool { return self.body is VariableDeclaration }

  fn hasAsyncParent (self: ref Self) bool {
    mut it := self

    loop it.hasParent() {
      p := it.parent()

      if p.isExpression() {
        expression := p.asExpression()
        expressionBody := expression.expression.asClosure()
        return expressionBody.asynchronous
      } elif p.isFunctionDeclaration() {
        body := p.asFunctionDeclaration()
        return body.asynchronous
      } elif p.isMainDeclaration() {
        return true
      } elif p.isObjectDeclarationMethod() {
        body := p.asObjectDeclarationMethod()
        return body.asynchronous
      }

      it = p
    }

    return false
  }

  fn hasLoopParent (self: ref Self) bool {
    mut it := self

    loop it.hasParent() {
      p := it.parent()

      if p.isLoop() {
        return true
      } elif (
        p.isExpression() ||
        p.isFunctionDeclaration() ||
        p.isMainDeclaration() ||
        p.isObjectDeclarationMethod()
      ) {
        return false
      }

      it = p
    }

    return false
  }

  fn hasMainParent (self: ref Self) bool {
    mut it := self

    loop it.hasParent() {
      p := it.parent()

      if p.isMainDeclaration() {
        return true
      } elif (
        p.isExpression() ||
        p.isFunctionDeclaration() ||
        p.isObjectDeclarationMethod()
      ) {
        return false
      }

      it = p
    }

    return false
  }

  fn hasNext (self: ref Self) bool {
    return self._next != nil
  }

  fn hasParent (self: ref Self) bool {
    return self._parent != nil
  }

  fn hasPrev (self: ref Self) bool {
    return self._prev != nil
  }

  fn isDeclaration (self: ref Self) bool {
    return
      self.isEnumDeclaration() ||
      self.isExportDeclaration() ||
      self.isExportNamedDeclaration() ||
      self.isFunctionDeclaration() ||
      self.isImportDeclaration() ||
      self.isMainDeclaration() ||
      self.isObjectDeclaration() ||
      self.isTypeAliasDeclaration()
  }

  fn isDeadEnd (self: ref Self, allowLoopStatements := true) bool {
    if self.isBlock() {
      statement := self.asBlock()
      bodyLen := statement.body.len

      loop i := 0; i < bodyLen; i++ {
        if statement.body[i].isDeadEnd(allowLoopStatements: allowLoopStatements) {
          return true
        }
      }

      return false
    } elif self.isIf() {
      statement := self.asIf()

      if !statement.consequent.isDeadEnd(allowLoopStatements: allowLoopStatements) {
        return false
      } elif statement.alternate != nil {
        if !statement.alternate.isDeadEnd(allowLoopStatements: allowLoopStatements) {
          return false
        }
      }

      return true
    } elif self.isLoop() {
      statement := self.asLoop()
      return statement.body.isDeadEnd(allowLoopStatements: false)
    } elif self.isTry() {
      statement := self.asTry()

      if !statement.body.isDeadEnd(allowLoopStatements: allowLoopStatements) {
        return false
      }

      handlersLen := statement.handlers.len

      loop i := 0; i < handlersLen; i++ {
        if !statement.handlers[i].body.isDeadEnd(allowLoopStatements: allowLoopStatements) {
          return false
        }
      }

      return true
    }

    isLoopStatement := allowLoopStatements && (self.isBreak() || self.isContinue())
    return isLoopStatement || self.isReturn() || self.isThrow()
  }

  fn isLoopDeep (self: ref Self) bool {
    mut it := self

    loop it.isBlock() && it.hasParent() {
      it = it.parent()
    }

    return it.isLoop()
  }

  fn next (self: ref Self) ref Statement {
    if self._next != nil {
      return self._next
    }
    throw ParserError{message: "Tried accessing nil next"}
  }

  fn parent (self: ref Self) ref Statement {
    if self._parent != nil {
      return self._parent
    }
    throw ParserError{message: "Tried accessing nil parent"}
  }

  fn parentMaybe (self: ref Self) (ref Statement)? {
    return self._parent
  }

  fn prev (self: ref Self) ref Statement {
    if self._prev != nil {
      return self._prev
    }
    throw ParserError{message: "Tried accessing nil prev"}
  }
}

export obj Identifier {
  start: int
  end: int
  name: str
}

export obj FunctionParameter {
  name: Identifier
  t: Type?
  initializer: Expression?
  mutable: bool
  variadic: bool
}

export obj ArrayType {
  elementType: Type
}

export obj DummyType {
}

export obj FunctionTypeParameter {
  name: Identifier?
  t: Type
  mutable: bool
  variadic: bool
}

export obj FunctionType {
  parameters: FunctionTypeParameter[]
  returnType: Type
  asynchronous: bool
}

export obj IdentifierType {
  name: Identifier
}

export obj MapType {
  keyType: Type
  valueType: Type
}

export obj MemberType {
  t: Type
  name: Identifier
}

export obj OptionalType {
  t: Type
}

export obj ParenthesizedType {
  t: Type
}

export obj ReferenceType {
  t: Type
}

export obj UnionType {
  types: Type[]
}

export obj BooleanLiteral {
  value: str
}

export obj CharacterLiteral {
  raw: str
  value: str
}

export obj FloatingPointLiteral {
  value: str
}

export enum IntegerLiteralType {
  Binary,
  Decimal,
  Hexadecimal,
  Octal
}

export obj IntegerLiteral {
  t: IntegerLiteralType
  value: str
}

export obj NilLiteral {
}

export obj StringLiteral {
  raw: str
  value: str
}

export obj ArrayExpression {
  elements: Expression[]
}

export obj AsExpression {
  expression: Expression
  t: Type
}

export obj AssignmentExpression {
  left: Expression
  operator: Token
  right: Expression
}

export obj AwaitExpression {
  expression: Expression
}

export obj BinaryExpression {
  left: Expression
  operator: Token
  right: Expression
}

export obj CallExpressionArgument {
  name: Identifier?
  expression: Expression
}

export obj CallExpression {
  callee: Expression
  arguments: CallExpressionArgument[]
}

export obj ClosureExpression {
  parameters: FunctionParameter[]
  returnType: Type
  body: Statement
  asynchronous: bool
}

export obj ConditionalExpression {
  condition: Expression
  consequent: Expression
  alternate: Expression
}

export obj ElementAccessExpression {
  expression: Expression
  argument: Expression
}

export obj DummyExpression {
}

export obj IsExpression {
  expression: Expression
  t: Type
}

export obj MapExpressionElement {
  key: Expression
  value: Expression
}

export obj MapExpression {
  elements: MapExpressionElement[]
}

export obj MemberAccessExpression {
  name: Identifier
}

export obj ObjectExpressionProperty {
  name: Identifier
  value: Expression
}

export obj ObjectExpression {
  id: Type
  properties: ObjectExpressionProperty[]
  _errorPosIdx: int
}

export obj ParenthesizedExpression {
  expression: Expression
}

export obj PropertyAccessExpression {
  expression: Expression
  name: Identifier
}

export obj ReferenceExpression {
  expression: Expression
}

export obj UnaryExpression {
  operator: Token
  operand: Expression
  prefix: bool
}

export obj BlockStatement {
  body: Statement[]
}

export obj BreakStatement {
}

export obj ContinueStatement {
}

export obj DummyStatement {
}

export obj EmptyStatement {
}

export obj EnumDeclarationMember {
  name: Identifier
  initializer: Expression?
}

export obj EnumDeclaration {
  name: Identifier
  members: EnumDeclarationMember[]
}

export obj EofStatement {
}

export obj ExportDeclaration {
  statement: Statement
}

export obj ExportNamedDeclaration {
  expression: Expression
}

export obj ExpressionStatement {
  expression: Expression
}

export obj FunctionDeclaration {
  name: Identifier
  parameters: FunctionParameter[]
  returnType: Type?
  body: Statement
  asynchronous: bool
}

export obj IfStatement {
  condition: Expression
  consequent: Statement
  alternate: Statement?
}

export obj ImportSpecifier {
  imported: Identifier
  local: Identifier
}

export obj ImportNamespaceSpecifier {
  name: Identifier
}

export type ImportDeclarationSpecifier = ImportSpecifier | ImportNamespaceSpecifier

export obj ImportDeclaration {
  specifiers: ImportDeclarationSpecifier[]
  source: Expression
}

export obj LoopStatement {
  initializer: Statement?
  condition: Expression?
  update: Expression?
  body: Statement
  parenthesized: bool
}

export obj MainDeclaration {
  body: Statement
}

export obj ObjectDeclaration {
  name: Identifier
  body: Statement[]
}

export obj ObjectDeclarationMethod {
  name: Identifier
  parameters: FunctionParameter[]
  returnType: Type?
  body: Statement
  asynchronous: bool
}

export obj ObjectDeclarationProperty {
  name: Identifier
  t: Type?
  initializer: Expression?
  mutable: bool
  constant: bool
}

export obj ReturnStatement {
  expression: Expression?
}

export obj ThrowStatement {
  expression: Expression
}

export obj TryStatementHandler {
  parameter: Statement
  body: Statement
}

export obj TryStatement {
  body: Statement
  handlers: TryStatementHandler[]
}

export obj TypeAliasDeclaration {
  name: Identifier
  t: Type
}

export obj VariableDeclaration {
  name: Identifier
  t: Type?
  initializer: Expression?
  mutable: bool
  constant: bool
}

export obj File {
  path: str
  content: str
  mut errors: str[]
  mut hasErrors: bool
  mut program: Program
}

export obj Location {
  mut line: int
  mut col: int
}

export obj Program {
  mut body: Statement[]
  mut eof: Statement
}

export enum TokenAssociativity {
  None,
  Left,
  Right,
}

export enum TokenType {
  Unknown,
  Eof,
  Id,
  Whitespace,

  CommentBlock,
  CommentLine,

  LitChar,
  LitFloat,
  LitIntBin,
  LitIntDec,
  LitIntHex,
  LitIntOct,
  LitStr,

  KwAs,
  KwAsync,
  KwAwait,
  KwBreak,
  KwCatch,
  KwConst,
  KwContinue,
  KwElif,
  KwElse,
  KwEnum,
  KwExport,
  KwFalse,
  KwFn,
  KwFrom,
  KwIf,
  KwImport,
  KwIs,
  KwLoop,
  KwMain,
  KwMut,
  KwNil,
  KwObj,
  KwRef,
  KwReturn,
  KwThrow,
  KwTrue,
  KwTry,
  KwType,

  OpAmp,
  OpAmpEq,
  OpAmpAmp,
  OpAmpAmpEq,
  OpArrow,
  OpAt,
  OpBacktick,
  OpBackslash,
  OpCaret,
  OpCaretEq,
  OpColon,
  OpColonEq,
  OpComma,
  OpDot,
  OpDollar,
  OpEllipsis,
  OpEq,
  OpEqEq,
  OpExcl,
  OpExclEq,
  OpGt,
  OpGtEq,
  OpHash,
  OpLBrace,
  OpLBrack,
  OpLPar,
  OpLShift,
  OpLShiftEq,
  OpLt,
  OpLtEq,
  OpMinus,
  OpMinusEq,
  OpMinusMinus,
  OpPipe,
  OpPipeEq,
  OpPipePipe,
  OpPipePipeEq,
  OpPercent,
  OpPercentEq,
  OpPlus,
  OpPlusEq,
  OpPlusPlus,
  OpQn,
  OpRBrace,
  OpRBrack,
  OpRPar,
  OpRShift,
  OpRShiftEq,
  OpSemi,
  OpSlash,
  OpSlashEq,
  OpStar,
  OpStarEq,
  OpTilde,
}

export obj TokenizerState {
  mut idx: int
  mut pos: int
  mut ch: char
  mut handled: bool
}
