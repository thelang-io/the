fn test () {}
async fn test () {}
fn test (a: int) int {}
fn test (mut a: int = 2, b := 3, c: int...) int {
  a = b + c
  return 1 + 2
}
===== out =====
Program
  FunctionDeclaration(start=0, end=13)
    name
      Identifier(start=3 end=7) test
    body
      BlockStatement(start=11, end=13)
  FunctionDeclaration(start=14, end=33 async)
    name
      Identifier(start=23 end=27) test
    body
      BlockStatement(start=31, end=33)
  FunctionDeclaration(start=34, end=57)
    name
      Identifier(start=37 end=41) test
    parameters
      FunctionParameter
        name
          Identifier(start=43 end=44) a
        type
          IdentifierType(start=46 end=49)
            Identifier(start=46 end=49) int
    returnType
      IdentifierType(start=51 end=54)
        Identifier(start=51 end=54) int
    body
      BlockStatement(start=55, end=57)
  FunctionDeclaration(start=58, end=136)
    name
      Identifier(start=61 end=65) test
    parameters
      FunctionParameter(mut)
        name
          Identifier(start=71 end=72) a
        type
          IdentifierType(start=74 end=77)
            Identifier(start=74 end=77) int
        initializer
          IntegerLiteral(start=80, end=81 type=Decimal) 2
      FunctionParameter
        name
          Identifier(start=83 end=84) b
        initializer
          IntegerLiteral(start=88, end=89 type=Decimal) 3
      FunctionParameter(variadic)
        name
          Identifier(start=91 end=92) c
        type
          IdentifierType(start=94 end=97)
            Identifier(start=94 end=97) int
    returnType
      IdentifierType(start=102 end=105)
        Identifier(start=102 end=105) int
    body
      BlockStatement(start=106, end=136)
        ExpressionStatement(start=110, end=119)
          AssignmentExpression(start=110, end=119)
            left
              Identifier(start=110 end=111) a
            op
              OpEq(start=112 end=113) =
            right
              BinaryExpression(start=114, end=119)
                left
                  Identifier(start=114 end=115) b
                op
                  OpPlus(start=116 end=117) +
                right
                  Identifier(start=118 end=119) c
        ReturnStatement(start=122, end=134)
          BinaryExpression(start=129, end=134)
            left
              IntegerLiteral(start=129, end=130 type=Decimal) 1
            op
              OpPlus(start=131 end=132) +
            right
              IntegerLiteral(start=133, end=134 type=Decimal) 2
  EofStatement(start=136, end=136)
