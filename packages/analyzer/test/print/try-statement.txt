obj MyError {
  mut message: str
  mut stack: str
}

fn parse () {
  throw MyError{message: "Don't do this"}
}

main {
  try {} catch err: Error {}

  try {
    parse()
  } catch err: Error {
    print(err.message)
  }

  try {
    parse()
  } catch err: Error {
    print(err.message)
  } catch err: MyError {
    print(err.message)
  }
}
===== out =====
ObjectDeclaration(name=MyError context:selfType=MyError)
  ObjectDeclarationProperty(name=message mutable=true constant=false type=str)
  ObjectDeclarationProperty(name=stack mutable=true constant=false type=str)
FunctionDeclaration(asynchronous=false name=parse context:var:name=parse context:var:type=() -> void context:var:mutable=false context:var:referenced=false)
  ThrowStatement()
    ObjectExpression(initial=MyError id=MyError)
      ObjectExpressionProperty(name=message)
        StringLiteral(initial=str value=Don't do this)
MainDeclaration()
  TryStatement()
    TryStatementHandler()
      VariableDeclaration(name=err mutable=false constant=false type=Error context:var:name=err context:var:type=Error context:var:mutable=false context:var:referenced=false)
  TryStatement()
    CallExpression(initial=void extra:asynchronous=false extra:returnType=void)
      Identifier(initial=() -> void name=parse)
    TryStatementHandler()
      VariableDeclaration(name=err mutable=false constant=false type=Error context:var:name=err context:var:type=Error context:var:mutable=false context:var:referenced=false)
      CallExpression(initial=void extra:asynchronous=false extra:returnType=void)
        Identifier(initial=(items: any..., separator: str, terminator: str, to: str) -> void name=print)
        CallExpressionArgument(extra:parameterIdx=0)
          PropertyAccessExpression(initial=str target=any name=message extra:propertyName=message extra:propertyType=str)
            Identifier(initial=Error name=err)
  TryStatement()
    CallExpression(initial=void extra:asynchronous=false extra:returnType=void)
      Identifier(initial=() -> void name=parse)
    TryStatementHandler()
      VariableDeclaration(name=err mutable=false constant=false type=Error context:var:name=err context:var:type=Error context:var:mutable=false context:var:referenced=false)
      CallExpression(initial=void extra:asynchronous=false extra:returnType=void)
        Identifier(initial=(items: any..., separator: str, terminator: str, to: str) -> void name=print)
        CallExpressionArgument(extra:parameterIdx=0)
          PropertyAccessExpression(initial=str target=any name=message extra:propertyName=message extra:propertyType=str)
            Identifier(initial=Error name=err)
    TryStatementHandler()
      VariableDeclaration(name=err mutable=false constant=false type=MyError context:var:name=err context:var:type=MyError context:var:mutable=false context:var:referenced=false)
      CallExpression(initial=void extra:asynchronous=false extra:returnType=void)
        Identifier(initial=(items: any..., separator: str, terminator: str, to: str) -> void name=print)
        CallExpressionArgument(extra:parameterIdx=0)
          PropertyAccessExpression(initial=str target=any name=message extra:propertyName=message extra:propertyType=str extra:propertyMutable)
            Identifier(initial=MyError name=err)
