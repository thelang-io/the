fn test4 () {}
fn test5 (i: int) int { return i }
async fn test6 (mut i: int, o := 10, p: u8 = 20, j: int...) int {
  k := i - j[0]
  return k
}
===== out =====
FunctionDeclaration(asynchronous=false name=test4 context:var:name=test4 context:var:type=() -> void context:var:mutable=false context:var:referenced=false)
FunctionDeclaration(asynchronous=false name=test5 return=int context:var:name=test5 context:var:type=(i: int) -> int context:var:mutable=false context:var:referenced=false)
  FunctionParameter(name=i type=int mutable=false variadic=false)
  ReturnStatement()
    Identifier(initial=int name=i)
FunctionDeclaration(asynchronous=true name=test6 return=int context:var:name=test6 context:var:type=async (mut i: int, o: int, p: u8, j: int...) -> int context:var:mutable=false context:var:referenced=false)
  FunctionParameter(name=i type=int mutable=true variadic=false)
  FunctionParameter(name=o mutable=false variadic=false)
    IntegerLiteral(initial=int value=10)
  FunctionParameter(name=p type=u8 mutable=false variadic=false)
    IntegerLiteral(initial=int target=u8 value=20)
  FunctionParameter(name=j type=int mutable=false variadic=true)
  VariableDeclaration(name=k mutable=false constant=false context:var:name=k context:var:type=int context:var:mutable=false context:var:referenced=false)
    BinaryExpression(initial=int operator=-)
      Identifier(initial=int name=i)
      ElementAccessExpression(initial=ref int target=int extra:selfType=int[])
        Identifier(initial=int[] name=j)
        IntegerLiteral(initial=int value=0)
  ReturnStatement()
    Identifier(initial=int name=k)
