fn test (a: int..., i := 10, j := 20, o := 30) int { return 10 }
const a := test()
const b := test(1)
const c := test(o: 1)
const d := test(1, 2)
const e := test(1, i: 2)
const f := test(i: 1, j: 2)
===== out =====
FunctionDeclaration(asynchronous=false name=test return=int context:var:name=test context:var:type=(a: int..., i: int, j: int, o: int) -> int context:var:mutable=false context:var:referenced=false)
  FunctionParameter(name=a type=int mutable=false variadic=true)
  FunctionParameter(name=i mutable=false variadic=false)
    IntegerLiteral(initial=int value=10)
  FunctionParameter(name=j mutable=false variadic=false)
    IntegerLiteral(initial=int value=20)
  FunctionParameter(name=o mutable=false variadic=false)
    IntegerLiteral(initial=int value=30)
  ReturnStatement()
    IntegerLiteral(initial=int value=10)
VariableDeclaration(name=a mutable=false constant=true context:var:name=a context:var:type=int context:var:mutable=false context:var:referenced=false)
  CallExpression(initial=int extra:asynchronous=false extra:returnType=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
VariableDeclaration(name=b mutable=false constant=true context:var:name=b context:var:type=int context:var:mutable=false context:var:referenced=false)
  CallExpression(initial=int extra:asynchronous=false extra:returnType=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
    CallExpressionArgument(extra:parameterIdx=0)
      IntegerLiteral(initial=int value=1)
VariableDeclaration(name=c mutable=false constant=true context:var:name=c context:var:type=int context:var:mutable=false context:var:referenced=false)
  CallExpression(initial=int extra:asynchronous=false extra:returnType=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
    CallExpressionArgument(name=o extra:parameterIdx=3)
      IntegerLiteral(initial=int value=1)
VariableDeclaration(name=d mutable=false constant=true context:var:name=d context:var:type=int context:var:mutable=false context:var:referenced=false)
  CallExpression(initial=int extra:asynchronous=false extra:returnType=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
    CallExpressionArgument(extra:parameterIdx=0)
      IntegerLiteral(initial=int value=1)
    CallExpressionArgument(extra:parameterIdx=0)
      IntegerLiteral(initial=int value=2)
VariableDeclaration(name=e mutable=false constant=true context:var:name=e context:var:type=int context:var:mutable=false context:var:referenced=false)
  CallExpression(initial=int extra:asynchronous=false extra:returnType=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
    CallExpressionArgument(extra:parameterIdx=0)
      IntegerLiteral(initial=int value=1)
    CallExpressionArgument(name=i extra:parameterIdx=1)
      IntegerLiteral(initial=int value=2)
VariableDeclaration(name=f mutable=false constant=true context:var:name=f context:var:type=int context:var:mutable=false context:var:referenced=false)
  CallExpression(initial=int extra:asynchronous=false extra:returnType=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
    CallExpressionArgument(name=i extra:parameterIdx=1)
      IntegerLiteral(initial=int value=1)
    CallExpressionArgument(name=j extra:parameterIdx=2)
      IntegerLiteral(initial=int value=2)
