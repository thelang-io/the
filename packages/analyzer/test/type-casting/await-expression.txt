async fn cond (n: int) bool {
  return n > 10
}

main {
  mut a: bool | int
  b := await cond(a = 10) ? a : 20
}
===== out =====
FunctionDeclaration(asynchronous=true name=cond return=bool context:var:name=cond context:var:type=async (n: int) -> bool context:var:mutable=false context:var:referenced=false)
  FunctionParameter(name=n type=int mutable=false variadic=false)
  ReturnStatement()
    BinaryExpression(initial=bool operator=>)
      Identifier(initial=int name=n)
      IntegerLiteral(initial=int value=10)
MainDeclaration()
  VariableDeclaration(name=a mutable=true constant=false type=bool | int context:var:name=a context:var:type=bool | int context:var:mutable=true context:var:referenced=false)
  VariableDeclaration(name=b mutable=false constant=false context:var:name=b context:var:type=int context:var:mutable=false context:var:referenced=false)
    ConditionalExpression(initial=int)
      AwaitExpression(initial=bool)
        CallExpression(initial=async (n: int) -> bool extra:asynchronous=true extra:returnType=bool)
          Identifier(initial=async (n: int) -> bool name=cond)
          CallExpressionArgument(extra:parameterIdx=0)
            AssignmentExpression(initial=int operator==)
              Identifier(initial=bool | int name=a)
              IntegerLiteral(initial=int target=bool | int value=10)
      Identifier(initial=bool | int target=int name=a)
      IntegerLiteral(initial=int value=20)
