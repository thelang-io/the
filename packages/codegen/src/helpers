/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as Analyzer from "the/analyzer"
import * as AST from "the/c"
import * as Parser from "the/parser"

export fn createASTPropertyAccess (expression: AST.CExpression, property: str) AST.CExpression {
  if expression.isAssignmentExpression() {
    return createASTPropertyAccessWithAssignment(expression, property)
  } elif expression.isUnaryExpression() {
    return createASTPropertyAccessWithUnary(expression, property)
  }

  return AST.createPropertyAccessExpression(expression, property)
}

export fn createASTPropertyAccessWithAssignment (expression: AST.CExpression, property: str) AST.CExpression {
  wrappedExpression := expression.wrap()
  return AST.createPropertyAccessExpression(wrappedExpression, property)
}

export fn createASTPropertyAccessWithUnary (expression: AST.CExpression, property: str) AST.CExpression {
  cUnaryExpression := expression.asUnaryExpression()

  if cUnaryExpression.postfix || cUnaryExpression.operator != "*" {
    return AST.createPropertyAccessExpression(expression, property)
  }

  wrappedExpression := expression.wrap()
  return AST.createPropertyAccessExpression(wrappedExpression, property)
}

export fn declarationType (item: ref Parser.Statement) (ref Analyzer.Type)? {
  itemContext := item.context

  if item.context is Analyzer.ObjectDeclarationContext {
    context := itemContext as Analyzer.ObjectDeclarationContext
    return context.selfType
  }

  return nil
}

export fn declarationByDependency (a: ref Parser.Statement, b: ref Parser.Statement) int {
  aType := declarationType(a)
  bType := declarationType(b)

  if aType == nil && bType == nil {
    return 0
  }

  if aType == nil || bType == nil {
    return aType == nil ? 1 : -1
  }

  aDefiniteType := aType as ref Analyzer.Type
  bDefiniteType := bType as ref Analyzer.Type

  aDependsOnB := aDefiniteType.dependsOn(bDefiniteType)
  bDependsOnA := bDefiniteType.dependsOn(aDefiniteType)

  if aDependsOnB && !bDependsOnA {
    return 1
  } elif bDependsOnA && !aDependsOnB {
    return -1
  }

  return 0
}

export fn expressionIsBuiltinMethod (item: ref Parser.Expression) bool {
  if item.isPropertyAccess() {
    contextExtra := item.contextExtra

    if item.contextExtra is Analyzer.PropertyAccessExpressionContextExtra {
      contextExtra := contextExtra as Analyzer.PropertyAccessExpressionContextExtra
      return contextExtra.property.builtin
    }
  }

  return false
}

export fn expressionResolve (item: ref Parser.Expression, up := false, down := false) ref Parser.Expression {
  if up {
    if !item.hasParent() {
      return item
    }

    mut parent := item.parent()

    if !parent.isParenthesized() {
      return item
    }

    loop parent.isParenthesized() {
      if !parent.hasParent() {
        break
      }

      parent = parent.parent()
    }

    return parent
  } elif down {
    mut it := item

    loop it.isParenthesized() {
      tmp := it.asParenthesized()
      it = tmp.expression
    }

    return it
  }

  return item
}

export fn expressionShouldBeAllocatedAfter (item: ref Parser.Expression) bool {
  itUp := expressionResolve(item, up: true)
  return itUp.hasParent()
}

export fn expressionShouldBeAllocatedBefore (item: ref Parser.Expression) bool {
  itDown := expressionResolve(item, down: true)

  return !(
    itDown.isIdentifier() ||
    itDown.isNilLiteral() ||
    itDown.isAssignment() ||
    itDown.isElementAccess() ||
    itDown.isMemberAccess() ||
    itDown.isPropertyAccess()
  )
}

export fn expressionShouldBeCopied (item: ref Parser.Expression) bool {
  itDown := expressionResolve(item, down: true)

  return (
    itDown.isIdentifier() ||
    itDown.isAssignment() ||
    itDown.isElementAccess() ||
    itDown.isMemberAccess() ||
    itDown.isPropertyAccess()
  )
}

export fn expressionShouldBeFreed (item: ref Parser.Expression) bool {
  itUp := expressionResolve(item, up: true)
  itDown := expressionResolve(item, down: true)

  return !(
    itUp.hasParent() ||
    itDown.isIdentifier() ||
    itDown.isNilLiteral() ||
    itDown.isAssignment() ||
    itDown.isElementAccess() ||
    itDown.isMemberAccess() ||
    itDown.isPropertyAccess()
  )
}

export fn normalizeBlock (statement: ref Parser.Statement) Parser.Statement[] {
  mut result: Parser.Statement[]

  if statement.isBlock() {
    block := statement.asBlock()
    result.merge(block.body)
  } else {
    result.push(statement)
  }

  return result
}

export fn statementHasPrecedingNonDeclaration (item: ref Parser.Statement) bool {
  mut it := item

  loop it.hasPrev() {
    it = it.prev()

    if !it.isDeclaration() && !it.isVariableDeclaration() {
      return true
    }
  }

  return false
}

export fn statementIsMacroInvocation (item: ref AST.CStatement) bool {
  if !item.isExpressionStatement() { return false }
  expression := item.asExpressionStatement()
  return expression.expression.isMacroInvocation()
}

export fn statementIsMacroInvocationDeclare (item: ref AST.CStatement) bool {
  return statementMacroInvocationCallee(item).find("DECLARE") != -1
}

export fn statementIsMacroInvocationForwardDeclare (item: ref AST.CStatement) bool {
  callee := statementMacroInvocationCallee(item)
  return callee.find("FORWARD_DECLARE") != -1
}

export fn statementMacroInvocationCallee (item: ref AST.CStatement) str {
  expression := item.asExpressionStatement()
  macroInvocation := expression.expression.asMacroInvocation()
  return macroInvocation.callee
}

export fn typeIsSimple (it: ref Analyzer.Type) bool {
  return !(
    it.name == "any" ||
    it.name == "str" ||
    it.isArray() ||
    it.isFunction() ||
    it.isMap() ||
    it.isCustomObject() ||
    it.isOptional() ||
    it.isUnion()
  )
}

export fn typeParameterId (parameter: ref Analyzer.TypeParameter) str {
  if parameter.mutable && parameter.required { return "FP5" }
  elif parameter.mutable && parameter.variadic { return "FP6" }
  elif parameter.mutable { return "FP2" }
  elif parameter.required { return "FP3" }
  elif parameter.variadic { return "FP4" }
  else { return "FP1" }
}

export fn typeSafeForTernaryAlternate (it: ref Analyzer.Type) bool {
  return !(
    it.name == "any" ||
    it.name == "str" ||
    it.isArray() ||
    it.isFunction() ||
    it.isMap() ||
    it.isCustomObject() ||
    it.isOptional() ||
    it.isUnion()
  )
}

export fn typeSafeForVaArg (mut tm: ref Analyzer.TypeMap, it: ref Analyzer.Type) ref Analyzer.Type {
  if it.isAlias() {
    t := it.asAlias()
    return typeSafeForVaArg(tm, t.t)
  }

  if it.name == "f32" {
    return tm.get("float")
  }

  return [
    "bool",
    "byte",
    "char",
    "i8",
    "i16",
    "rune",
    "u8",
    "u16",
  ].contains(it.name) ? tm.get("i32") : it
}

export fn typeShouldBeAllocated (self: ref Analyzer.Type) bool {
  t := Analyzer.unwrap(self, withReference: false)

  return (
    t.name == "any" ||
    t.name == "str" ||
    t.isArray() ||
    t.isMap() ||
    t.isCustomObject() ||
    t.isOptional() ||
    t.isUnion()
  )
}

export fn typeShouldBeFreed (self: ref Analyzer.Type) bool {
  t := Analyzer.unwrap(self, withReference: false)

  if t.isUnion() {
    t := t.asUnion()

    loop i := 0; i < t.types.len; i++ {
      subType := t.types[i]

      if typeShouldBeFreed(subType) {
        return true
      }
    }

    return false
  }

  return
    t.name == "any" ||
    t.name == "str" ||
    t.isArray() ||
    t.isCustomObject() ||
    t.isFunction() ||
    t.isMap() ||
    t.isOptional()
}
