Planning Board

=====

```the
const a := "text" // For every variable referenced inside declaration create ARC
fn test () str { return a }
main {
  b := test()
}
```

=====

```the
obj Test {}
fn createTest () ref Test {
  t := Test{}
  return ref t // For every `ref` create ARC
  // For every return of ARC, create a copy
}
main {
  test := createTest()
}
```

=====

```the
obj Counter {
  mut val: int
  fn count (mut self: ref Self) int {
    return self.val++
  }
}
main {
  mut count := () -> int { return 0 }
  if true {
    mut t := Test{}
    count = t.count
  }
  count() // How to pass here reference to self of `t` from above scope?
}
```
