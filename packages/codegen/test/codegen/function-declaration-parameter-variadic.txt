fn test1 (a: int...) {
  print(a)
}

fn test2 (a: int, b: int...) {
  print(a, b)
}

fn test3 (a: int, b: int..., c := 0) {
  print(a, b, c)
}

main {
  test1()
  test1(1)
  test1(1, 2)
  test2(0)
  test2(1, 2)
  test2(2, 3, 4)
  test3(3)
  test3(4, 5)
  test3(6, 7, 8)
  test3(7, c: 8)
  test3(9, 10, c: 11)
  test3(12, 13, 14, c: 15)
}
===== code =====
#include <d4/any.h>
#include <d4/array.h>
#include <d4/fn.h>
#include <d4/globals.h>
#include <d4/number.h>
#include <d4/safe.h>
#include <d4/string.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#define TYPE_arr_int 1
#define TYPE_int 2
D4_ARRAY_DECLARE(int, int32_t)
D4_FUNCTION_DECLARE_WITH_PARAMS(s, void, void, FP4arr_int, {
  d4_arr_int_t n0;
})
D4_FUNCTION_DECLARE_WITH_PARAMS(s, void, void, FP3intFP4arr_int, {
  int32_t n0;
  d4_arr_int_t n1;
})
D4_FUNCTION_DECLARE_WITH_PARAMS(s, void, void, FP3intFP4arr_intFP1int, {
  int32_t n0;
  d4_arr_int_t n1;
  unsigned char o2;
  int32_t n2;
})
D4_ANY_DECLARE(arr_int, d4_arr_int_t)
D4_ANY_DECLARE(int, int32_t)
D4_ARRAY_DEFINE(int, int32_t, int32_t, element, lhs_element == rhs_element, (void) element, d4_int_str(element))
D4_FUNCTION_DEFINE_WITH_PARAMS(s, void, void, FP4arr_int)
D4_FUNCTION_DEFINE_WITH_PARAMS(s, void, void, FP3intFP4arr_int)
D4_FUNCTION_DEFINE_WITH_PARAMS(s, void, void, FP3intFP4arr_intFP1int)
D4_ANY_DEFINE(TYPE_arr_int, arr_int, d4_arr_int_t, d4_arr_int_copy(val), d4_arr_int_eq(lhs_val, rhs_val), d4_arr_int_free(val), d4_arr_int_str(val))
D4_ANY_DEFINE(TYPE_int, int, int32_t, val, lhs_val == rhs_val, (void) val, d4_int_str(val))
d4_fn_sFP4arr_intFRvoidFE_t test1_0;
d4_fn_sFP3intFP4arr_intFRvoidFE_t test2_0;
d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_t test3_0;
void test1_0_func (void *ctx, d4_fn_sFP4arr_intFRvoidFE_params_t *params) {
  d4_arr_int_t a_0 = params->n0;
  d4_any_t __THE_1 = {-1, NULL, NULL, NULL, NULL, NULL};
  d4_arr_any_t __THE_2 = (d4_arr_any_t) {NULL, 0};
  void *__THE_3 = NULL;
  d4_print.func(d4_print.ctx, __THE_3 = d4_safe_calloc(&(d4_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_params_t) {__THE_2 = d4_arr_any_alloc(1, __THE_1 = d4_any_arr_int_alloc(a_0)), 0, d4_str_empty_val, 0, d4_str_empty_val, 0, d4_str_empty_val}, sizeof(d4_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_params_t)));
  d4_safe_free(__THE_3);
  d4_arr_any_free(__THE_2);
  d4_any_free(__THE_1);
}
void test2_0_func (void *ctx, d4_fn_sFP3intFP4arr_intFRvoidFE_params_t *params) {
  int32_t a_0 = params->n0;
  d4_arr_int_t b_0 = params->n1;
  d4_any_t __THE_1 = {-1, NULL, NULL, NULL, NULL, NULL};
  d4_any_t __THE_2 = {-1, NULL, NULL, NULL, NULL, NULL};
  d4_arr_any_t __THE_3 = (d4_arr_any_t) {NULL, 0};
  void *__THE_4 = NULL;
  d4_print.func(d4_print.ctx, __THE_4 = d4_safe_calloc(&(d4_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_params_t) {__THE_3 = d4_arr_any_alloc(2, __THE_1 = d4_any_int_alloc(a_0), __THE_2 = d4_any_arr_int_alloc(b_0)), 0, d4_str_empty_val, 0, d4_str_empty_val, 0, d4_str_empty_val}, sizeof(d4_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_params_t)));
  d4_safe_free(__THE_4);
  d4_arr_any_free(__THE_3);
  d4_any_free(__THE_2);
  d4_any_free(__THE_1);
}
void test3_0_func (void *ctx, d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t *params) {
  int32_t a_0 = params->n0;
  d4_arr_int_t b_0 = params->n1;
  int32_t c_0 = params->o2 == 1 ? params->n2 : 0;
  d4_any_t __THE_1 = {-1, NULL, NULL, NULL, NULL, NULL};
  d4_any_t __THE_2 = {-1, NULL, NULL, NULL, NULL, NULL};
  d4_any_t __THE_3 = {-1, NULL, NULL, NULL, NULL, NULL};
  d4_arr_any_t __THE_4 = (d4_arr_any_t) {NULL, 0};
  void *__THE_5 = NULL;
  d4_print.func(d4_print.ctx, __THE_5 = d4_safe_calloc(&(d4_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_params_t) {__THE_4 = d4_arr_any_alloc(3, __THE_1 = d4_any_int_alloc(a_0), __THE_2 = d4_any_arr_int_alloc(b_0), __THE_3 = d4_any_int_alloc(c_0)), 0, d4_str_empty_val, 0, d4_str_empty_val, 0, d4_str_empty_val}, sizeof(d4_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_params_t)));
  d4_safe_free(__THE_5);
  d4_arr_any_free(__THE_4);
  d4_any_free(__THE_3);
  d4_any_free(__THE_2);
  d4_any_free(__THE_1);
}
int main (void) {
  d4_arr_int_t __THE_1 = (d4_arr_int_t) {NULL, 0};
  void *__THE_2 = NULL;
  d4_arr_int_t __THE_3 = (d4_arr_int_t) {NULL, 0};
  void *__THE_4 = NULL;
  d4_arr_int_t __THE_5 = (d4_arr_int_t) {NULL, 0};
  void *__THE_6 = NULL;
  d4_arr_int_t __THE_7 = (d4_arr_int_t) {NULL, 0};
  void *__THE_8 = NULL;
  d4_arr_int_t __THE_9 = (d4_arr_int_t) {NULL, 0};
  void *__THE_10 = NULL;
  d4_arr_int_t __THE_11 = (d4_arr_int_t) {NULL, 0};
  void *__THE_12 = NULL;
  d4_arr_int_t __THE_13 = (d4_arr_int_t) {NULL, 0};
  void *__THE_14 = NULL;
  d4_arr_int_t __THE_15 = (d4_arr_int_t) {NULL, 0};
  void *__THE_16 = NULL;
  d4_arr_int_t __THE_17 = (d4_arr_int_t) {NULL, 0};
  void *__THE_18 = NULL;
  d4_arr_int_t __THE_19 = (d4_arr_int_t) {NULL, 0};
  void *__THE_20 = NULL;
  d4_arr_int_t __THE_21 = (d4_arr_int_t) {NULL, 0};
  void *__THE_22 = NULL;
  d4_arr_int_t __THE_23 = (d4_arr_int_t) {NULL, 0};
  void *__THE_24 = NULL;
  test1_0 = d4_fn_sFP4arr_intFRvoidFE_alloc((d4_str_t) {L"test1", 5, true}, NULL, NULL, NULL, (void (*) (void *, void *)) test1_0_func);
  test2_0 = d4_fn_sFP3intFP4arr_intFRvoidFE_alloc((d4_str_t) {L"test2", 5, true}, NULL, NULL, NULL, (void (*) (void *, void *)) test2_0_func);
  test3_0 = d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_alloc((d4_str_t) {L"test3", 5, true}, NULL, NULL, NULL, (void (*) (void *, void *)) test3_0_func);
  test1_0.func(test1_0.ctx, __THE_2 = d4_safe_calloc(&(d4_fn_sFP4arr_intFRvoidFE_params_t) {__THE_1 = d4_arr_int_alloc(0)}, sizeof(d4_fn_sFP4arr_intFRvoidFE_params_t)));
  test1_0.func(test1_0.ctx, __THE_4 = d4_safe_calloc(&(d4_fn_sFP4arr_intFRvoidFE_params_t) {__THE_3 = d4_arr_int_alloc(1, 1)}, sizeof(d4_fn_sFP4arr_intFRvoidFE_params_t)));
  test1_0.func(test1_0.ctx, __THE_6 = d4_safe_calloc(&(d4_fn_sFP4arr_intFRvoidFE_params_t) {__THE_5 = d4_arr_int_alloc(2, 1, 2)}, sizeof(d4_fn_sFP4arr_intFRvoidFE_params_t)));
  test2_0.func(test2_0.ctx, __THE_8 = d4_safe_calloc(&(d4_fn_sFP3intFP4arr_intFRvoidFE_params_t) {0, __THE_7 = d4_arr_int_alloc(0)}, sizeof(d4_fn_sFP3intFP4arr_intFRvoidFE_params_t)));
  test2_0.func(test2_0.ctx, __THE_10 = d4_safe_calloc(&(d4_fn_sFP3intFP4arr_intFRvoidFE_params_t) {1, __THE_9 = d4_arr_int_alloc(1, 2)}, sizeof(d4_fn_sFP3intFP4arr_intFRvoidFE_params_t)));
  test2_0.func(test2_0.ctx, __THE_12 = d4_safe_calloc(&(d4_fn_sFP3intFP4arr_intFRvoidFE_params_t) {2, __THE_11 = d4_arr_int_alloc(2, 3, 4)}, sizeof(d4_fn_sFP3intFP4arr_intFRvoidFE_params_t)));
  test3_0.func(test3_0.ctx, __THE_14 = d4_safe_calloc(&(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t) {3, __THE_13 = d4_arr_int_alloc(0), 0, 0}, sizeof(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t)));
  test3_0.func(test3_0.ctx, __THE_16 = d4_safe_calloc(&(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t) {4, __THE_15 = d4_arr_int_alloc(1, 5), 0, 0}, sizeof(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t)));
  test3_0.func(test3_0.ctx, __THE_18 = d4_safe_calloc(&(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t) {6, __THE_17 = d4_arr_int_alloc(2, 7, 8), 0, 0}, sizeof(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t)));
  test3_0.func(test3_0.ctx, __THE_20 = d4_safe_calloc(&(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t) {7, __THE_19 = d4_arr_int_alloc(0), 1, 8}, sizeof(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t)));
  test3_0.func(test3_0.ctx, __THE_22 = d4_safe_calloc(&(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t) {9, __THE_21 = d4_arr_int_alloc(1, 10), 1, 11}, sizeof(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t)));
  test3_0.func(test3_0.ctx, __THE_24 = d4_safe_calloc(&(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t) {12, __THE_23 = d4_arr_int_alloc(2, 13, 14), 1, 15}, sizeof(d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_params_t)));
  d4_safe_free(__THE_24);
  d4_arr_int_free(__THE_23);
  d4_safe_free(__THE_22);
  d4_arr_int_free(__THE_21);
  d4_safe_free(__THE_20);
  d4_arr_int_free(__THE_19);
  d4_safe_free(__THE_18);
  d4_arr_int_free(__THE_17);
  d4_safe_free(__THE_16);
  d4_arr_int_free(__THE_15);
  d4_safe_free(__THE_14);
  d4_arr_int_free(__THE_13);
  d4_safe_free(__THE_12);
  d4_arr_int_free(__THE_11);
  d4_safe_free(__THE_10);
  d4_arr_int_free(__THE_9);
  d4_safe_free(__THE_8);
  d4_arr_int_free(__THE_7);
  d4_safe_free(__THE_6);
  d4_arr_int_free(__THE_5);
  d4_safe_free(__THE_4);
  d4_arr_int_free(__THE_3);
  d4_safe_free(__THE_2);
  d4_arr_int_free(__THE_1);
  d4_fn_sFP3intFP4arr_intFP1intFRvoidFE_free(test3_0);
  d4_fn_sFP3intFP4arr_intFRvoidFE_free(test2_0);
  d4_fn_sFP4arr_intFRvoidFE_free(test1_0);
}
===== output =====
[]
[1]
[1, 2]
0 []
1 [2]
2 [3, 4]
3 [] 0
4 [5] 0
6 [7, 8] 0
7 [] 8
9 [10] 11
12 [13, 14] 15
