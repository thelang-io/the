type Alias = str
obj Test1 {
  a: Alias
}
obj Test2 {
  a: any
}
obj Test3 {
  a: int[]
  b: str[]
}
obj Test4 {
  a: int[str]
  b: str[str]
}
obj Test5 {
  mut a: Test1
}
obj Test6 {
  a: int?
}
obj Test7 {
  a: ref int
}
obj Test8 {
  a: Self?
}
obj Test9 {
  a: str
}
obj Test10 {
  a: int | str
}

main {
  i1 := 1
  i2 := 2

  t1 := Test1{a: ""}
  mut t2 := t1
  t2 = Test1{a: "test"}

  t3 := Test2{a: 1}
  mut t4 := t3
  t4 = Test2{a: "test2"}

  t5 := Test3{a: [1, 2, 3], b: ["string1", "string2"]}
  mut t6 := t5
  t6 = Test3{a: [4, 5], b: ["string3", "string4"]}

  t7 := Test4{
    a: { "key1": 1, "key2": 2, "key3": 3 },
    b: { "key1": "string1", "key2": "string2" },
  }

  mut t8 := t7

  t8 = Test4{
    a: { "key1": 4, "key2": 5 },
    b: { "key1": "string3", "key2": "string4" },
  }

  t9 := Test5{a: Test1{a: "string1"}}
  mut t10 := t9
  t10 = Test5{a: Test1{a: "string2"}}
  t10.a = t9.a
  t10.a = Test1{a: "string3"}

  t11 := Test6{a: nil}
  mut t12 := t11
  t12 = Test6{a: 3}

  t13 := Test7{a: ref i1}
  mut t14 := t13
  t14 = Test7{a: ref i2}

  t15 := Test8{}
  t16 := Test8{a: t15}
  mut t17 := t16
  t17 = Test8{a: t16}

  t18 := Test9{a: "test1"}
  mut t19 := t18
  t19 = Test9{a: "test2"}

  t20 := Test10{a: 1}
  mut t21 := t20
  t21 = Test10{a: "test"}
}
===== code =====
#include <d4/any.h>
#include <d4/array.h>
#include <d4/macro.h>
#include <d4/map.h>
#include <d4/number.h>
#include <d4/object.h>
#include <d4/optional.h>
#include <d4/reference.h>
#include <d4/string.h>
#include <d4/union.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#define TYPE_int 1
#define TYPE_str 2
D4_OBJECT_FORWARD_DECLARE(Test1)
D4_OBJECT_FORWARD_DECLARE(Test2)
D4_OBJECT_FORWARD_DECLARE(Test3)
D4_OBJECT_FORWARD_DECLARE(Test4)
D4_OBJECT_FORWARD_DECLARE(Test5)
D4_OBJECT_FORWARD_DECLARE(Test6)
D4_OBJECT_FORWARD_DECLARE(Test7)
D4_OBJECT_FORWARD_DECLARE(Test9)
D4_OBJECT_FORWARD_DECLARE(Test10)
D4_OBJECT_FORWARD_DECLARE(Test8)
D4_OBJECT_DECLARE(Test1, {
  d4_str_t a;
}, const d4_str_t a)
D4_OBJECT_DECLARE(Test2, {
  d4_any_t a;
}, const d4_any_t a)
D4_ARRAY_DECLARE(int, int32_t)
D4_OBJECT_DECLARE(Test3, {
  d4_arr_int_t a;
  d4_arr_str_t b;
}, const d4_arr_int_t a, const d4_arr_str_t b)
D4_MAP_DECLARE(str, d4_str_t, int, int32_t)
D4_MAP_DECLARE(str, d4_str_t, str, d4_str_t)
D4_OBJECT_DECLARE(Test4, {
  d4_map_strMSintME_t a;
  d4_map_strMSstrME_t b;
}, const d4_map_strMSintME_t a, const d4_map_strMSstrME_t b)
D4_OBJECT_DECLARE(Test5, {
  d4_obj_Test1_t a;
}, const d4_obj_Test1_t a)
D4_OPTIONAL_DECLARE(int, int32_t)
D4_OBJECT_DECLARE(Test6, {
  d4_opt_int_t a;
}, const d4_opt_int_t a)
D4_REFERENCE_DECLARE(int, int32_t)
D4_OBJECT_DECLARE(Test7, {
  d4_ref_int_t a;
}, const d4_ref_int_t a)
D4_OBJECT_DECLARE(Test9, {
  d4_str_t a;
}, const d4_str_t a)
D4_UNION_DECLARE(intUSstr, {
  int32_t v1;
  d4_str_t v2;
})
D4_OBJECT_DECLARE(Test10, {
  d4_union_intUSstrUE_t a;
}, const d4_union_intUSstrUE_t a)
D4_ANY_DECLARE(int, int32_t)
D4_ANY_DECLARE(str, d4_str_t)
D4_OPTIONAL_DECLARE(obj_Test8, d4_obj_Test8_t)
D4_OBJECT_DECLARE(Test8, {
  d4_opt_obj_Test8_t a;
}, const d4_opt_obj_Test8_t a)
D4_OBJECT_DEFINE(Test1, Test1, {
  self.a = d4_str_copy(a);
}, {
  result.a = d4_str_copy(self.a);
}, {
  return d4_str_eq(self.a, rhs.a);
}, {
  d4_str_free(self.a);
}, {
  result = d4_obj_str_append(result, d4_str_alloc(L"a"), d4_str_quoted_escape(self.a));
}, const d4_str_t a)
D4_OBJECT_DEFINE(Test2, Test2, {
  self.a = d4_any_copy(a);
}, {
  result.a = d4_any_copy(self.a);
}, {
  return d4_any_eq(self.a, rhs.a);
}, {
  d4_any_free(self.a);
}, {
  result = d4_obj_str_append(result, d4_str_alloc(L"a"), d4_any_str(self.a));
}, const d4_any_t a)
D4_ARRAY_DEFINE(int, int32_t, int32_t, element, lhs_element == rhs_element, (void) element, d4_int_str(element))
D4_OBJECT_DEFINE(Test3, Test3, {
  self.a = d4_arr_int_copy(a);
  self.b = d4_arr_str_copy(b);
}, {
  result.a = d4_arr_int_copy(self.a);
  result.b = d4_arr_str_copy(self.b);
}, {
  return d4_arr_int_eq(self.a, rhs.a) && d4_arr_str_eq(self.b, rhs.b);
}, {
  d4_arr_int_free(self.a);
  d4_arr_str_free(self.b);
}, {
  result = d4_obj_str_append(result, d4_str_alloc(L"a"), d4_arr_int_str(self.a));
  result = d4_obj_str_append(result, d4_str_alloc(L"b"), d4_arr_str_str(self.b));
}, const d4_arr_int_t a, const d4_arr_str_t b)
D4_MAP_DEFINE(str, d4_str_t, d4_str_t, d4_str_copy(key), d4_str_eq(lhs_key, rhs_key), d4_str_free(key), d4_str_copy(key), d4_str_quoted_escape(key), int, int32_t, int32_t, val, lhs_val == rhs_val, (void) val, d4_int_str(val))
D4_MAP_DEFINE(str, d4_str_t, d4_str_t, d4_str_copy(key), d4_str_eq(lhs_key, rhs_key), d4_str_free(key), d4_str_copy(key), d4_str_quoted_escape(key), str, d4_str_t, d4_str_t, d4_str_copy(val), d4_str_eq(lhs_val, rhs_val), d4_str_free(val), d4_str_quoted_escape(val))
D4_OBJECT_DEFINE(Test4, Test4, {
  self.a = d4_map_strMSintME_copy(a);
  self.b = d4_map_strMSstrME_copy(b);
}, {
  result.a = d4_map_strMSintME_copy(self.a);
  result.b = d4_map_strMSstrME_copy(self.b);
}, {
  return d4_map_strMSintME_eq(self.a, rhs.a) && d4_map_strMSstrME_eq(self.b, rhs.b);
}, {
  d4_map_strMSintME_free(self.a);
  d4_map_strMSstrME_free(self.b);
}, {
  result = d4_obj_str_append(result, d4_str_alloc(L"a"), d4_map_strMSintME_str(self.a));
  result = d4_obj_str_append(result, d4_str_alloc(L"b"), d4_map_strMSstrME_str(self.b));
}, const d4_map_strMSintME_t a, const d4_map_strMSstrME_t b)
D4_OBJECT_DEFINE(Test5, Test5, {
  self.a = d4_obj_Test1_copy(a);
}, {
  result.a = d4_obj_Test1_copy(self.a);
}, {
  return d4_obj_Test1_eq(self.a, rhs.a);
}, {
  d4_obj_Test1_free(self.a);
}, {
  result = d4_obj_str_append(result, d4_str_alloc(L"a"), d4_obj_Test1_str(self.a));
}, const d4_obj_Test1_t a)
D4_OPTIONAL_DEFINE(int, int32_t, val, lhs_val == rhs_val, (void) val, d4_int_str(val))
D4_OBJECT_DEFINE(Test6, Test6, {
  self.a = d4_opt_int_copy(a);
}, {
  result.a = d4_opt_int_copy(self.a);
}, {
  return d4_opt_int_eq(self.a, rhs.a);
}, {
  d4_opt_int_free(self.a);
}, {
  result = d4_obj_str_append(result, d4_str_alloc(L"a"), d4_opt_int_str(self.a));
}, const d4_opt_int_t a)
D4_OBJECT_DEFINE(Test7, Test7, {
  self.a = a;
}, {
  result.a = self.a;
}, {
  return self.a == rhs.a;
}, {}, {
  result = d4_obj_str_append(result, d4_str_alloc(L"a"), d4_int_str(*self.a));
}, const d4_ref_int_t a)
D4_OBJECT_DEFINE(Test9, Test9, {
  self.a = d4_str_copy(a);
}, {
  result.a = d4_str_copy(self.a);
}, {
  return d4_str_eq(self.a, rhs.a);
}, {
  d4_str_free(self.a);
}, {
  result = d4_obj_str_append(result, d4_str_alloc(L"a"), d4_str_quoted_escape(self.a));
}, const d4_str_t a)
D4_UNION_DEFINE(intUSstr, {
  if (self.type == TYPE_int) self.data.v1 = va_arg(args, int32_t);
  if (self.type == TYPE_str) self.data.v2 = d4_str_copy(va_arg(args, d4_str_t));
}, {
  if (self.type == TYPE_int) result.data.v1 = self.data.v1;
  if (self.type == TYPE_str) result.data.v2 = d4_str_copy(self.data.v2);
}, {
  if (self.type == TYPE_int) return self.data.v1 == rhs.data.v1;
  if (self.type == TYPE_str) return d4_str_eq(self.data.v2, rhs.data.v2);
}, {
  if (self.type == TYPE_str) d4_str_free(self.data.v2);
}, {
  if (self.type == TYPE_int) return d4_int_str(self.data.v1);
  if (self.type == TYPE_str) return d4_str_copy(self.data.v2);
})
D4_OBJECT_DEFINE(Test10, Test10, {
  self.a = d4_union_intUSstrUE_copy(a);
}, {
  result.a = d4_union_intUSstrUE_copy(self.a);
}, {
  return d4_union_intUSstrUE_eq(self.a, rhs.a);
}, {
  d4_union_intUSstrUE_free(self.a);
}, {
  result = d4_obj_str_append(result, d4_str_alloc(L"a"), d4_union_intUSstrUE_str(self.a));
}, const d4_union_intUSstrUE_t a)
D4_ANY_DEFINE(TYPE_int, int, int32_t, val, lhs_val == rhs_val, (void) val, d4_int_str(val))
D4_ANY_DEFINE(TYPE_str, str, d4_str_t, d4_str_copy(val), d4_str_eq(lhs_val, rhs_val), d4_str_free(val), d4_str_copy(val))
D4_OPTIONAL_DEFINE(obj_Test8, d4_obj_Test8_t, d4_obj_Test8_copy(val), d4_obj_Test8_eq(lhs_val, rhs_val), d4_obj_Test8_free(val), d4_obj_Test8_str(val))
D4_OBJECT_DEFINE(Test8, Test8, {
  self.a = d4_opt_obj_Test8_copy(a);
}, {
  result.a = d4_opt_obj_Test8_copy(self.a);
}, {
  return d4_opt_obj_Test8_eq(self.a, rhs.a);
}, {
  d4_opt_obj_Test8_free(self.a);
}, {
  result = d4_obj_str_append(result, d4_str_alloc(L"a"), d4_opt_obj_Test8_str(self.a));
}, const d4_opt_obj_Test8_t a)
int main (void) {
  d4_str_t __THE_1 = d4_str_empty_val;
  d4_str_t __THE_2 = d4_str_empty_val;
  d4_obj_Test1_t __THE_3 = (d4_obj_Test1_t) {d4_str_empty_val};
  d4_any_t __THE_4 = {-1, NULL, NULL, NULL, NULL, NULL};
  d4_obj_Test2_t t3_0;
  d4_obj_Test2_t t4_0;
  d4_str_t __THE_5 = d4_str_empty_val;
  d4_any_t __THE_6 = {-1, NULL, NULL, NULL, NULL, NULL};
  d4_obj_Test2_t __THE_7 = (d4_obj_Test2_t) {(d4_any_t) {-1, NULL, NULL, NULL, NULL, NULL}};
  d4_arr_int_t __THE_8 = (d4_arr_int_t) {NULL, 0};
  d4_str_t __THE_9 = d4_str_empty_val;
  d4_str_t __THE_10 = d4_str_empty_val;
  d4_arr_str_t __THE_11 = (d4_arr_str_t) {NULL, 0};
  d4_obj_Test3_t t5_0;
  d4_obj_Test3_t t6_0;
  d4_arr_int_t __THE_12 = (d4_arr_int_t) {NULL, 0};
  d4_str_t __THE_13 = d4_str_empty_val;
  d4_str_t __THE_14 = d4_str_empty_val;
  d4_arr_str_t __THE_15 = (d4_arr_str_t) {NULL, 0};
  d4_obj_Test3_t __THE_16 = (d4_obj_Test3_t) {(d4_arr_int_t) {NULL, 0}, (d4_arr_str_t) {NULL, 0}};
  d4_str_t __THE_17 = d4_str_empty_val;
  d4_str_t __THE_18 = d4_str_empty_val;
  d4_str_t __THE_19 = d4_str_empty_val;
  d4_map_strMSintME_t __THE_20 = (d4_map_strMSintME_t) {NULL, 0, 0};
  d4_str_t __THE_21 = d4_str_empty_val;
  d4_str_t __THE_22 = d4_str_empty_val;
  d4_str_t __THE_23 = d4_str_empty_val;
  d4_str_t __THE_24 = d4_str_empty_val;
  d4_map_strMSstrME_t __THE_25 = (d4_map_strMSstrME_t) {NULL, 0, 0};
  d4_obj_Test4_t t7_0;
  d4_obj_Test4_t t8_0;
  d4_str_t __THE_26 = d4_str_empty_val;
  d4_str_t __THE_27 = d4_str_empty_val;
  d4_map_strMSintME_t __THE_28 = (d4_map_strMSintME_t) {NULL, 0, 0};
  d4_str_t __THE_29 = d4_str_empty_val;
  d4_str_t __THE_30 = d4_str_empty_val;
  d4_str_t __THE_31 = d4_str_empty_val;
  d4_str_t __THE_32 = d4_str_empty_val;
  d4_map_strMSstrME_t __THE_33 = (d4_map_strMSstrME_t) {NULL, 0, 0};
  d4_obj_Test4_t __THE_34 = (d4_obj_Test4_t) {(d4_map_strMSintME_t) {NULL, 0, 0}, (d4_map_strMSstrME_t) {NULL, 0, 0}};
  d4_str_t __THE_35 = d4_str_empty_val;
  d4_obj_Test1_t __THE_36 = (d4_obj_Test1_t) {d4_str_empty_val};
  d4_obj_Test5_t t9_0;
  d4_obj_Test5_t t10_0;
  d4_str_t __THE_37 = d4_str_empty_val;
  d4_obj_Test1_t __THE_38 = (d4_obj_Test1_t) {d4_str_empty_val};
  d4_obj_Test5_t __THE_39 = (d4_obj_Test5_t) {(d4_obj_Test1_t) {d4_str_empty_val}};
  d4_str_t __THE_40 = d4_str_empty_val;
  d4_obj_Test1_t __THE_41 = (d4_obj_Test1_t) {d4_str_empty_val};
  d4_obj_Test6_t t11_0;
  d4_obj_Test6_t t12_0;
  d4_opt_int_t __THE_42 = NULL;
  d4_obj_Test6_t __THE_43 = (d4_obj_Test6_t) {NULL};
  d4_obj_Test7_t t13_0;
  d4_obj_Test7_t t14_0;
  d4_obj_Test7_t __THE_44 = (d4_obj_Test7_t) {NULL};
  d4_obj_Test8_t t15_0;
  d4_opt_obj_Test8_t __THE_45 = NULL;
  d4_obj_Test8_t t16_0;
  d4_obj_Test8_t t17_0;
  d4_opt_obj_Test8_t __THE_46 = NULL;
  d4_obj_Test8_t __THE_47 = (d4_obj_Test8_t) {NULL};
  d4_str_t __THE_48 = d4_str_empty_val;
  d4_obj_Test9_t t18_0;
  d4_obj_Test9_t t19_0;
  d4_str_t __THE_49 = d4_str_empty_val;
  d4_obj_Test9_t __THE_50 = (d4_obj_Test9_t) {d4_str_empty_val};
  d4_union_intUSstrUE_t __THE_51 = (d4_union_intUSstrUE_t) {-1, {0}};
  d4_obj_Test10_t t20_0;
  d4_obj_Test10_t t21_0;
  d4_str_t __THE_52 = d4_str_empty_val;
  d4_union_intUSstrUE_t __THE_53 = (d4_union_intUSstrUE_t) {-1, {0}};
  d4_obj_Test10_t __THE_54 = (d4_obj_Test10_t) {(d4_union_intUSstrUE_t) {-1, {0}}};
  int32_t i1_0 = 1;
  int32_t i2_0 = 2;
  d4_obj_Test1_t t1_0 = d4_obj_Test1_alloc(__THE_1 = d4_str_alloc(L""));
  d4_obj_Test1_t t2_0 = d4_obj_Test1_copy(t1_0);
  t2_0 = d4_obj_Test1_realloc(t2_0, __THE_3 = d4_obj_Test1_alloc(__THE_2 = d4_str_alloc(L"test")));
  t3_0 = d4_obj_Test2_alloc(__THE_4 = d4_any_int_alloc(1));
  t4_0 = d4_obj_Test2_copy(t3_0);
  t4_0 = d4_obj_Test2_realloc(t4_0, __THE_7 = d4_obj_Test2_alloc(__THE_6 = d4_any_str_alloc(__THE_5 = d4_str_alloc(L"test2"))));
  t5_0 = d4_obj_Test3_alloc(__THE_8 = d4_arr_int_alloc(3, 1, 2, 3), __THE_11 = d4_arr_str_alloc(2, __THE_9 = d4_str_alloc(L"string1"), __THE_10 = d4_str_alloc(L"string2")));
  t6_0 = d4_obj_Test3_copy(t5_0);
  t6_0 = d4_obj_Test3_realloc(t6_0, __THE_16 = d4_obj_Test3_alloc(__THE_12 = d4_arr_int_alloc(2, 4, 5), __THE_15 = d4_arr_str_alloc(2, __THE_13 = d4_str_alloc(L"string3"), __THE_14 = d4_str_alloc(L"string4"))));
  t7_0 = d4_obj_Test4_alloc(__THE_20 = d4_map_strMSintME_alloc(3, __THE_17 = d4_str_alloc(L"key1"), 1, __THE_18 = d4_str_alloc(L"key2"), 2, __THE_19 = d4_str_alloc(L"key3"), 3), __THE_25 = d4_map_strMSstrME_alloc(2, __THE_21 = d4_str_alloc(L"key1"), __THE_22 = d4_str_alloc(L"string1"), __THE_23 = d4_str_alloc(L"key2"), __THE_24 = d4_str_alloc(L"string2")));
  t8_0 = d4_obj_Test4_copy(t7_0);
  t8_0 = d4_obj_Test4_realloc(t8_0, __THE_34 = d4_obj_Test4_alloc(__THE_28 = d4_map_strMSintME_alloc(2, __THE_26 = d4_str_alloc(L"key1"), 4, __THE_27 = d4_str_alloc(L"key2"), 5), __THE_33 = d4_map_strMSstrME_alloc(2, __THE_29 = d4_str_alloc(L"key1"), __THE_30 = d4_str_alloc(L"string3"), __THE_31 = d4_str_alloc(L"key2"), __THE_32 = d4_str_alloc(L"string4"))));
  t9_0 = d4_obj_Test5_alloc(__THE_36 = d4_obj_Test1_alloc(__THE_35 = d4_str_alloc(L"string1")));
  t10_0 = d4_obj_Test5_copy(t9_0);
  t10_0 = d4_obj_Test5_realloc(t10_0, __THE_39 = d4_obj_Test5_alloc(__THE_38 = d4_obj_Test1_alloc(__THE_37 = d4_str_alloc(L"string2"))));
  t10_0.a = d4_obj_Test1_realloc(t10_0.a, t9_0.a);
  t10_0.a = d4_obj_Test1_realloc(t10_0.a, __THE_41 = d4_obj_Test1_alloc(__THE_40 = d4_str_alloc(L"string3")));
  t11_0 = d4_obj_Test6_alloc(NULL);
  t12_0 = d4_obj_Test6_copy(t11_0);
  t12_0 = d4_obj_Test6_realloc(t12_0, __THE_43 = d4_obj_Test6_alloc(__THE_42 = d4_opt_int_alloc(3)));
  t13_0 = d4_obj_Test7_alloc(&i1_0);
  t14_0 = d4_obj_Test7_copy(t13_0);
  t14_0 = d4_obj_Test7_realloc(t14_0, __THE_44 = d4_obj_Test7_alloc(&i2_0));
  t15_0 = d4_obj_Test8_alloc(NULL);
  t16_0 = d4_obj_Test8_alloc(__THE_45 = d4_opt_obj_Test8_alloc(t15_0));
  t17_0 = d4_obj_Test8_copy(t16_0);
  t17_0 = d4_obj_Test8_realloc(t17_0, __THE_47 = d4_obj_Test8_alloc(__THE_46 = d4_opt_obj_Test8_alloc(t16_0)));
  t18_0 = d4_obj_Test9_alloc(__THE_48 = d4_str_alloc(L"test1"));
  t19_0 = d4_obj_Test9_copy(t18_0);
  t19_0 = d4_obj_Test9_realloc(t19_0, __THE_50 = d4_obj_Test9_alloc(__THE_49 = d4_str_alloc(L"test2")));
  t20_0 = d4_obj_Test10_alloc(__THE_51 = d4_union_intUSstrUE_alloc(TYPE_int, 1));
  t21_0 = d4_obj_Test10_copy(t20_0);
  t21_0 = d4_obj_Test10_realloc(t21_0, __THE_54 = d4_obj_Test10_alloc(__THE_53 = d4_union_intUSstrUE_alloc(TYPE_str, __THE_52 = d4_str_alloc(L"test"))));
  d4_obj_Test10_free(__THE_54);
  d4_union_intUSstrUE_free(__THE_53);
  d4_str_free(__THE_52);
  d4_obj_Test10_free(t21_0);
  d4_obj_Test10_free(t20_0);
  d4_union_intUSstrUE_free(__THE_51);
  d4_obj_Test9_free(__THE_50);
  d4_str_free(__THE_49);
  d4_obj_Test9_free(t19_0);
  d4_obj_Test9_free(t18_0);
  d4_str_free(__THE_48);
  d4_obj_Test8_free(__THE_47);
  d4_opt_obj_Test8_free(__THE_46);
  d4_obj_Test8_free(t17_0);
  d4_obj_Test8_free(t16_0);
  d4_opt_obj_Test8_free(__THE_45);
  d4_obj_Test8_free(t15_0);
  d4_obj_Test7_free(__THE_44);
  d4_obj_Test7_free(t14_0);
  d4_obj_Test7_free(t13_0);
  d4_obj_Test6_free(__THE_43);
  d4_opt_int_free(__THE_42);
  d4_obj_Test6_free(t12_0);
  d4_obj_Test6_free(t11_0);
  d4_obj_Test1_free(__THE_41);
  d4_str_free(__THE_40);
  d4_obj_Test5_free(__THE_39);
  d4_obj_Test1_free(__THE_38);
  d4_str_free(__THE_37);
  d4_obj_Test5_free(t10_0);
  d4_obj_Test5_free(t9_0);
  d4_obj_Test1_free(__THE_36);
  d4_str_free(__THE_35);
  d4_obj_Test4_free(__THE_34);
  d4_map_strMSstrME_free(__THE_33);
  d4_str_free(__THE_32);
  d4_str_free(__THE_31);
  d4_str_free(__THE_30);
  d4_str_free(__THE_29);
  d4_map_strMSintME_free(__THE_28);
  d4_str_free(__THE_27);
  d4_str_free(__THE_26);
  d4_obj_Test4_free(t8_0);
  d4_obj_Test4_free(t7_0);
  d4_map_strMSstrME_free(__THE_25);
  d4_str_free(__THE_24);
  d4_str_free(__THE_23);
  d4_str_free(__THE_22);
  d4_str_free(__THE_21);
  d4_map_strMSintME_free(__THE_20);
  d4_str_free(__THE_19);
  d4_str_free(__THE_18);
  d4_str_free(__THE_17);
  d4_obj_Test3_free(__THE_16);
  d4_arr_str_free(__THE_15);
  d4_str_free(__THE_14);
  d4_str_free(__THE_13);
  d4_arr_int_free(__THE_12);
  d4_obj_Test3_free(t6_0);
  d4_obj_Test3_free(t5_0);
  d4_arr_str_free(__THE_11);
  d4_str_free(__THE_10);
  d4_str_free(__THE_9);
  d4_arr_int_free(__THE_8);
  d4_obj_Test2_free(__THE_7);
  d4_any_free(__THE_6);
  d4_str_free(__THE_5);
  d4_obj_Test2_free(t4_0);
  d4_obj_Test2_free(t3_0);
  d4_any_free(__THE_4);
  d4_obj_Test1_free(__THE_3);
  d4_str_free(__THE_2);
  d4_obj_Test1_free(t2_0);
  d4_obj_Test1_free(t1_0);
  d4_str_free(__THE_1);
}
===== output =====
